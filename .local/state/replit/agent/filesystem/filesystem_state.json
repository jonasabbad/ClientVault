{"file_contents":{"DEPLOYMENT.md":{"content":"# Production Deployment to Vercel\n\n## Prerequisites\n- Vercel CLI installed: `npm i -g vercel`\n- Vercel account with linked GitHub/GitLab/Bitbucket\n- Environment variables configured in Vercel dashboard\n\n## Quick Deployment Steps\n\n### 1. Install Vercel CLI\n```bash\nnpm i -g vercel\n```\n\n### 2. Login to Vercel\n```bash\nvercel login\n```\n\n### 3. Deploy from CLI\n```bash\nvercel --prod\n```\n\n### 4. Or Deploy via Git Integration\n1. Push code to GitHub\n2. Import project in Vercel dashboard\n3. Configure build settings:\n   - Build Command: `npm run vercel-build`\n   - Output Directory: `client/dist`\n   - Install Command: `npm install`\n\n## Environment Variables Setup\n\nAdd these to Vercel dashboard under Settings > Environment Variables:\n\n### Required Variables:\n- `VITE_FIREBASE_API_KEY`\n- `VITE_FIREBASE_AUTH_DOMAIN`\n- `VITE_FIREBASE_PROJECT_ID`\n- `VITE_FIREBASE_STORAGE_BUCKET`\n- `VITE_FIREBASE_MESSAGING_SENDER_ID`\n- `VITE_FIREBASE_APP_ID`\n- `DATABASE_URL`\n- `SESSION_SECRET`\n\n### Optional Variables:\n- `VITE_FIREBASE_MEASUREMENT_ID`\n- `NODE_ENV=production`\n\n## Build Configuration\n\nThe project is configured for:\n- **Frontend**: Static React build in `client/dist`\n- **Backend**: Serverless functions for API routes\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Firebase Auth\n\n## Troubleshooting\n\n### Common Issues:\n1. **Build fails**: Check Node.js version (requires 18+)\n2. **Environment variables**: Ensure all required vars are set\n3. **Database connection**: Verify DATABASE_URL format\n4. **Firebase config**: Check all Firebase variables are correct\n\n### Debug Commands:\n```bash\nvercel --prod --debug\nvercel logs\n```\n\n## Post-Deployment\n\n1. Set up custom domain (optional)\n2. Configure SSL certificates\n3. Set up monitoring and alerts\n4. Test all API endpoints\n5. Verify database connections\n","size_bytes":1815},"DEPLOYMENT_CHECKLIST.md":{"content":"# Vercel Deployment Checklist\n\n## ✅ Completed Configuration Updates\n\n### 1. Updated vercel.json\n- [x] Optimized build configuration\n- [x] Proper routing for SPA and API\n- [x] Serverless function configuration\n\n### 2. Updated package.json\n- [x] Added vercel-build script\n- [x] Ensured proper build commands\n\n### 3. Created API Structure\n- [x] Serverless API entry point at api/index.js\n- [x] Compatible with Vercel serverless functions\n\n## 🚀 Ready for Deployment\n\n### Quick Deployment Steps:\n\n1. **Install Vercel CLI** (if not already installed):\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Login to Vercel**:\n   ```bash\n   vercel login\n   ```\n\n3. **Deploy to Vercel**:\n   ```bash\n   vercel --prod\n   ```\n\n### Environment Variables to Set in Vercel Dashboard:\n\n**Required:**\n- `VITE_FIREBASE_API_KEY`\n- `VITE_FIREBASE_AUTH_DOMAIN`\n- `VITE_FIREBASE_PROJECT_ID`\n- `VITE_FIREBASE_STORAGE_BUCKET`\n- `VITE_FIREBASE_MESSAGING_SENDER_ID`\n- `VITE_FIREBASE_APP_ID`\n- `DATABASE_URL`\n- `SESSION_SECRET`\n\n**Optional:**\n- `VITE_FIREBASE_MEASUREMENT_ID`\n- `NODE_ENV=production`\n\n### Build Configuration:\n- **Build Command**: `npm run vercel-build`\n- **Output Directory**: `client/dist`\n- **Install Command**: `npm install`\n\n### Project Structure:\n```\n├── client/          # React frontend\n├── server/          # Express backend\n├── api/             # Vercel serverless functions\n├── vercel.json      # Vercel configuration\n└── package.json     # Build scripts\n```\n\n### Testing:\n1. Run `npm run vercel-build` locally to test build\n2. Deploy to Vercel\n3. Test all API endpoints\n4. Verify database connections\n\n### Troubleshooting:\n- Check Node.js version (requires 18+)\n- Verify all environment variables are set\n- Test build process locally first\n","size_bytes":1765},"FIREBASE_SETUP.md":{"content":"# Firebase Setup for Vercel Deployment\n\n## Problem Identified\nThe 500 Internal Server Error on `/api/settings/test-connection` is caused by **missing Firebase environment variables** in your Vercel deployment.\n\n## Root Cause\nYour local `.env` file is not being used by Vercel. Environment variables must be configured in the Vercel Dashboard.\n\n## Solution Steps\n\n### 1. Add Environment Variables to Vercel\n\nGo to [Vercel Dashboard](https://vercel.com/dashboard) and follow these steps:\n\n1. Select your project `client-vault-taupe`\n2. Go to **Settings** → **Environment Variables**\n3. Add these variables:\n\n| Variable Name | Value |\n|---------------|--------|\n| `VITE_FIREBASE_API_KEY` | `AIzaSyDnD79096i5eYtYd0sgupdwZIOVZsWC4Lw` |\n| `VITE_FIREBASE_PROJECT_ID` | `recharging-mobiles-online` |\n| `VITE_FIREBASE_APP_ID` | `1:258902263753:web:e1e0b6c7adabbec4714a18` |\n| `VITE_FIREBASE_MESSAGING_SENDER_ID` | `258902263753` |\n\n### 2. Redeploy Your Application\n\nAfter adding the environment variables:\n1. Go to your project in Vercel Dashboard\n2. Click **Redeploy** on the latest deployment\n3. Wait for the deployment to complete\n\n### 3. Test the Connection\n\nOnce redeployed:\n1. Visit your deployed app\n2. Go to Settings page\n3. Click \"Test Firebase Connection\"\n4. The connection should now succeed\n\n### 4. Verification Commands\n\nYou can verify the setup by running:\n```bash\n# Check if environment variables are set\nnode check-firebase-setup.js\n\n# Test the endpoint directly\ncurl -X POST https://client-vault-taupe.vercel.app/api/settings/test-connection\n```\n\n## Expected Result\nAfter completing these steps, the `/api/settings/test-connection` endpoint should return:\n```json\n{\n  \"success\": true,\n  \"message\": \"Firebase connection successful\",\n  \"details\": {\n    \"documentExists\": false,\n    \"projectId\": \"recharging-mobiles-online\"\n  }\n}\n```\n\n## Troubleshooting\nIf you still see errors:\n1. Double-check all variable names match exactly\n2. Ensure no extra spaces in the values\n3. Verify the Firebase project has Firestore enabled\n4. Check Vercel deployment logs for any additional errors\n","size_bytes":2086},"README.md":{"content":"\"# ClientVault\" \n","size_bytes":17},"check-firebase-setup.js":{"content":"#!/usr/bin/env node\n/**\n * Check Firebase configuration for Vercel deployment\n * Run this script to verify your Firebase setup\n */\n\nconsole.log('🔍 Checking Firebase configuration...\\n');\n\n// Check environment variables\nconst requiredEnvVars = [\n  'VITE_FIREBASE_API_KEY',\n  'VITE_FIREBASE_PROJECT_ID',\n  'VITE_FIREBASE_APP_ID',\n  'VITE_FIREBASE_MESSAGING_SENDER_ID'\n];\n\nconsole.log('📋 Required Environment Variables:');\nrequiredEnvVars.forEach(envVar => {\n  const value = process.env[envVar];\n  const status = value ? '✅ Configured' : '❌ Missing';\n  console.log(`  ${envVar}: ${status}`);\n  if (value && envVar.includes('KEY')) {\n    console.log(`    Value: ${value.substring(0, 8)}...`);\n  }\n});\n\nconsole.log('\\n🔧 Firebase Configuration Summary:');\nconst config = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: process.env.VITE_FIREBASE_PROJECT_ID ? `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com` : undefined,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.VITE_FIREBASE_PROJECT_ID ? `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app` : undefined,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || '258902263753',\n  appId: process.env.VITE_FIREBASE_APP_ID\n};\n\nObject.entries(config).forEach(([key, value]) => {\n  console.log(`  ${key}: ${value || '❌ Missing'}`);\n});\n\n// Check if all required variables are present\nconst missingVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\nif (missingVars.length > 0) {\n  console.log('\\n❌ Missing environment variables:');\n  missingVars.forEach(envVar => console.log(`  - ${envVar}`));\n  console.log('\\n💡 To fix this:');\n  console.log('1. Go to Vercel Dashboard → Settings → Environment Variables');\n  console.log('2. Add the missing variables with your Firebase values');\n  console.log('3. Redeploy your application');\n} else {\n  console.log('\\n✅ All Firebase environment variables are configured!');\n}\n\nconsole.log('\\n🚀 Next steps:');\nconsole.log('1. Ensure all environment variables are set in Vercel');\nconsole.log('2. Redeploy your application');\nconsole.log('3. Test the connection again');\n","size_bytes":2167},"check-test-connection-doc.js":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc } from \"firebase/firestore\";\n\n// Firebase config - ensure environment variables are set before running this script\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: process.env.VITE_FIREBASE_PROJECT_ID + \".firebaseapp.com\",\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.VITE_FIREBASE_PROJECT_ID + \".firebasestorage.app\",\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nasync function checkTestConnectionDoc() {\n  try {\n    const testDocRef = doc(db, \"test\", \"connection\");\n    const docSnap = await getDoc(testDocRef);\n\n    if (docSnap.exists()) {\n      console.log(\"Document 'test/connection' exists:\", docSnap.data());\n    } else {\n      console.log(\"Document 'test/connection' does NOT exist.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking 'test/connection' document:\", error);\n  }\n}\n\ncheckTestConnectionDoc();\n","size_bytes":1135},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Customer Manager - Client & Payment System\n\n## Overview\n\nThis is a full-stack web application for managing clients and their payment codes across different services. The system provides a dashboard for viewing statistics, managing client information, and handling payment codes for various services. It includes features like client search, data export, and print functionality for thermal receipts. The application uses a modern React frontend with a Node.js/Express backend and Firebase Firestore database for real data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/UI components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Component Structure**: Component-based architecture with reusable UI components in `/client/src/components/ui/`\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Error Handling**: Centralized error handling middleware\n- **Development**: Vite middleware integration for hot module replacement\n- **Storage**: Firebase Firestore integration with abstracted storage interface\n- **Configuration**: Server-side Firebase configuration with environment variables\n\n### Database Design\n- **Database**: Firebase Firestore (NoSQL document database)\n- **Collections**: clients, services, paymentCodes, searchHistory, and settings\n- **Storage**: Firebase Storage implementation replacing in-memory storage\n- **Real-time**: Firebase real-time updates and cloud persistence\n- **Relationships**: Document references between clients, services, and payment codes\n\n### Authentication & Authorization\n- Currently no authentication system implemented\n- Session management placeholder exists with connect-pg-simple\n- Ready for future authentication integration\n\n### Key Features\n- **Dashboard**: Statistics overview with client counts and recent activity\n- **Client Management**: Full CRUD operations for client data with Firebase persistence\n- **Payment Code System**: Unique codes per service-client combination\n- **Search Functionality**: Real-time client search with history tracking\n- **Export Capabilities**: CSV export functionality (PDF planned)\n- **Print System**: Thermal receipt printing for client payment codes\n- **Settings Management**: Firebase connection testing and preference persistence\n- **Responsive Design**: Mobile-first responsive design\n\n### Data Flow\n1. Frontend components use TanStack Query for API calls\n2. Express routes handle business logic and validation\n3. Firebase Storage layer manages all CRUD operations\n4. Firebase Firestore handles data persistence and real-time updates\n5. Query invalidation ensures fresh data across components\n\n## External Dependencies\n\n### Database Services\n- **Firebase Firestore**: NoSQL document database with real-time capabilities\n- **Firebase Storage**: File storage and management\n- **Firebase Configuration**: Environment-based setup for development and production\n\n### UI Framework & Styling\n- **Radix UI**: Headless UI component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Shadcn/UI**: Pre-built component library\n- **Lucide React**: Icon library\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type system for JavaScript\n- **ESBuild**: JavaScript bundler for production builds\n- **PostCSS**: CSS processing tool\n\n### Client-Side Libraries\n- **TanStack Query**: Data fetching and caching\n- **React Hook Form**: Form state management\n- **Zod**: Schema validation library\n- **Wouter**: Lightweight routing library\n- **Date-fns**: Date utility library\n\n### Server-Side Libraries\n- **Express.js**: Web application framework\n- **tsx**: TypeScript execution for development\n- **connect-pg-simple**: PostgreSQL session store (prepared for future use)\n\n### Replit Integration\n- **Replit Vite Plugins**: Development environment integration and error overlay\n- **Replit Banner**: Development environment indicator","size_bytes":4381},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        inwi: \"var(--inwi)\",\n        orange: \"var(--orange)\",\n        telecom: \"var(--telecom)\",\n        water: \"var(--water)\",\n        gas: \"var(--gas)\",\n        electricity: \"var(--electricity)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3004},"test-api-connection.js":{"content":"// Simple test script to test the API endpoint\nimport https from 'https';\nimport http from 'http';\n\nasync function testConnection() {\n  console.log('Testing Firebase connection via API...');\n  \n  const options = {\n    hostname: 'client-vault-taupe.vercel.app',\n    port: 443,\n    path: '/api/settings/test-connection',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    const req = https.request(options, (res) => {\n      let data = '';\n      \n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const result = JSON.parse(data);\n          console.log('Response status:', res.statusCode);\n          console.log('Response data:', JSON.stringify(result, null, 2));\n          resolve(result);\n        } catch (error) {\n          console.error('Error parsing response:', error);\n          console.log('Raw response:', data);\n          reject(error);\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      console.error('Request error:', error);\n      reject(error);\n    });\n\n    req.end();\n  });\n}\n\n// Run the test\ntestConnection()\n  .then(result => {\n    console.log('\\n✅ Test completed successfully!');\n    if (result.success) {\n      console.log('🎉 Firebase connection is working!');\n    } else {\n      console.log('❌ Firebase connection failed:', result.message);\n    }\n  })\n  .catch(error => {\n    console.error('\\n❌ Test failed:', error.message);\n  }); ","size_bytes":1536},"test-api-routing.js":{"content":"// Test script to verify API routing\nimport https from 'https';\n\nasync function testApiRouting() {\n  console.log('🔧 Testing API Routing...\\n');\n  \n  const baseUrl = 'client-vault-pi.vercel.app';\n  \n  // Test 1: Simple API endpoint\n  console.log('1️⃣ Testing simple API endpoint...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/test', 'GET');\n    console.log('✅ Simple API works:', result);\n  } catch (error) {\n    console.log('❌ Simple API failed:', error.message);\n  }\n  \n  // Test 2: Clients API endpoint\n  console.log('\\n2️⃣ Testing clients API endpoint...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/clients', 'GET');\n    console.log('✅ Clients API works, found clients:', result.length);\n  } catch (error) {\n    console.log('❌ Clients API failed:', error.message);\n  }\n  \n  // Test 3: Services API endpoint\n  console.log('\\n3️⃣ Testing services API endpoint...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/services', 'GET');\n    console.log('✅ Services API works, found services:', result.length);\n  } catch (error) {\n    console.log('❌ Services API failed:', error.message);\n  }\n  \n  // Test 4: Client details API endpoint\n  console.log('\\n4️⃣ Testing client details API endpoint...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/clients/7cc743f2-81a2-450a-a69e-3f386f479ee7', 'GET');\n    console.log('✅ Client details API works:', {\n      id: result.id,\n      name: result.name,\n      paymentCodesCount: result.paymentCodes?.length || 0\n    });\n  } catch (error) {\n    console.log('❌ Client details API failed:', error.message);\n  }\n  \n  // Test 5: Non-existent API endpoint\n  console.log('\\n5️⃣ Testing non-existent API endpoint...');\n  try {\n    await makeRequest(baseUrl, '/api/non-existent', 'GET');\n    console.log('❌ Should have failed but succeeded');\n  } catch (error) {\n    if (error.message.includes('404')) {\n      console.log('✅ Correctly returned 404 for non-existent API');\n    } else {\n      console.log('❌ Unexpected error for non-existent API:', error.message);\n    }\n  }\n  \n  console.log('\\n📊 API Routing Test Summary:');\n  console.log('- If you see HTML responses, the API routing is broken');\n  console.log('- If you see JSON responses, the API routing is working');\n  console.log('- If you see 404 errors for non-existent endpoints, that\\'s correct');\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          // Check if response is HTML (indicating routing issue)\n          if (responseData.includes('<!DOCTYPE html>') || responseData.includes('<html')) {\n            reject(new Error(`API routing issue - received HTML instead of JSON: ${responseData.substring(0, 200)}...`));\n            return;\n          }\n          \n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData.substring(0, 200)}...`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestApiRouting()\n  .then(() => {\n    console.log('\\n🚀 API routing test completed!');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test execution failed:', error);\n  }); ","size_bytes":4062},"test-api-simple.js":{"content":"// Simple test script for API endpoints\nimport https from 'https';\n\nasync function testAPI() {\n  console.log('Testing API endpoints...');\n  \n  // Test the test endpoint first\n  console.log('\\n1. Testing /api/test...');\n  try {\n    const testResult = await makeRequest('client-vault-pi.vercel.app', '/api/test', 'GET');\n    console.log('✅ Test endpoint works:', testResult);\n  } catch (error) {\n    console.log('❌ Test endpoint failed:', error.message);\n  }\n  \n  // Test the clients GET endpoint\n  console.log('\\n2. Testing /api/clients GET...');\n  try {\n    const clientsResult = await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'GET');\n    console.log('✅ Clients GET works:', clientsResult);\n  } catch (error) {\n    console.log('❌ Clients GET failed:', error.message);\n  }\n  \n  // Test the clients POST endpoint\n  console.log('\\n3. Testing /api/clients POST...');\n  try {\n    const testClient = {\n      name: \"Test Client\",\n      phone: \"+212 600 000 000\",\n      paymentCodes: []\n    };\n    const postResult = await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'POST', testClient);\n    console.log('✅ Clients POST works:', postResult);\n  } catch (error) {\n    console.log('❌ Clients POST failed:', error.message);\n  }\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData}`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestAPI()\n  .then(() => {\n    console.log('\\n🎉 All tests completed!');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test failed:', error);\n  }); ","size_bytes":2555},"test-client-creation.js":{"content":"// Test script for client creation flow with Firebase\nimport https from 'https';\n\nasync function testClientCreation() {\n  console.log('🧪 Testing Client Creation Flow with Firebase...\\n');\n  \n  // Step 1: Test services API\n  console.log('1️⃣ Testing Services API...');\n  try {\n    const servicesResult = await makeRequest('client-vault-pi.vercel.app', '/api/services', 'GET');\n    console.log('✅ Services API works:', servicesResult);\n  } catch (error) {\n    console.log('❌ Services API failed:', error.message);\n    return;\n  }\n  \n  // Step 2: Create a test service\n  console.log('\\n2️⃣ Creating a test service...');\n  try {\n    const testService = {\n      name: \"Test Service\",\n      color: \"#3B82F6\",\n      icon: \"credit-card\"\n    };\n    const serviceResult = await makeRequest('client-vault-pi.vercel.app', '/api/services', 'POST', testService);\n    console.log('✅ Service created successfully:', serviceResult);\n    \n    // Step 3: Get services again to confirm\n    const updatedServices = await makeRequest('client-vault-pi.vercel.app', '/api/services', 'GET');\n    console.log('✅ Updated services list:', updatedServices);\n    \n    // Step 4: Create a test client with payment codes\n    console.log('\\n3️⃣ Creating a test client with payment codes...');\n    const testClient = {\n      name: \"Test Client\",\n      phone: \"+212 600 000 000\",\n      paymentCodes: [\n        {\n          serviceId: serviceResult.id,\n          code: \"TEST123\"\n        }\n      ]\n    };\n    const clientResult = await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'POST', testClient);\n    console.log('✅ Client created successfully:', clientResult);\n    \n    // Step 5: Get clients to confirm\n    console.log('\\n4️⃣ Verifying client creation...');\n    const clientsResult = await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'GET');\n    console.log('✅ Clients list:', clientsResult);\n    \n    // Step 6: Test duplicate client name\n    console.log('\\n5️⃣ Testing duplicate client name validation...');\n    try {\n      await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'POST', testClient);\n      console.log('❌ Duplicate validation failed - should have rejected');\n    } catch (error) {\n      if (error.message.includes('already exists')) {\n        console.log('✅ Duplicate validation works correctly');\n      } else {\n        console.log('❌ Unexpected error:', error.message);\n      }\n    }\n    \n    console.log('\\n🎉 Client creation flow test completed successfully!');\n    console.log('\\n📊 Summary:');\n    console.log('- ✅ Services API working');\n    console.log('- ✅ Service creation working');\n    console.log('- ✅ Client creation working');\n    console.log('- ✅ Payment codes working');\n    console.log('- ✅ Duplicate validation working');\n    console.log('- ✅ Firebase integration working');\n    \n  } catch (error) {\n    console.log('❌ Test failed:', error.message);\n  }\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData}`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestClientCreation()\n  .then(() => {\n    console.log('\\n🚀 All tests completed!');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test execution failed:', error);\n  }); ","size_bytes":4272},"test-client-details-fixed.js":{"content":"// Test script to verify the fixed client details API\nimport https from 'https';\n\nasync function testClientDetailsFixed() {\n  console.log('🔧 Testing Fixed Client Details API...\\n');\n  \n  const baseUrl = 'client-vault-pi.vercel.app';\n  \n  // Test 1: Get all clients\n  console.log('1️⃣ Getting all clients...');\n  try {\n    const clients = await makeRequest(baseUrl, '/api/clients', 'GET');\n    console.log('✅ Found clients:', clients.length);\n    \n    if (clients.length === 0) {\n      console.log('❌ No clients found');\n      return;\n    }\n    \n    // Test 2: Get first client details using query parameter\n    console.log('\\n2️⃣ Testing client details with query parameter...');\n    const firstClient = clients[0];\n    console.log(`   Testing client: ${firstClient.name} (ID: ${firstClient.id})`);\n    \n    try {\n      const clientDetails = await makeRequest(baseUrl, `/api/clients?id=${firstClient.id}`, 'GET');\n      console.log('✅ Client details retrieved successfully:', {\n        id: clientDetails.id,\n        name: clientDetails.name,\n        phone: clientDetails.phone,\n        paymentCodesCount: clientDetails.paymentCodes?.length || 0\n      });\n      console.log('🔍 Full response:', JSON.stringify(clientDetails, null, 2));\n    } catch (error) {\n      console.log('❌ Failed to get client details:', error.message);\n    }\n    \n    // Test 3: Test the problematic client ID\n    console.log('\\n3️⃣ Testing the problematic client ID...');\n    const problematicId = '9afc37ee-0579-485e-ad34-5269fc987429';\n    console.log(`   Testing ID: ${problematicId}`);\n    \n    try {\n      const problematicClient = await makeRequest(baseUrl, `/api/clients?id=${problematicId}`, 'GET');\n      console.log('✅ Problematic client found:', {\n        id: problematicClient.id,\n        name: problematicClient.name,\n        phone: problematicClient.phone,\n        paymentCodesCount: problematicClient.paymentCodes?.length || 0\n      });\n    } catch (error) {\n      console.log('❌ Problematic client not found:', error.message);\n    }\n    \n    // Test 4: Test with non-existent ID\n    console.log('\\n4️⃣ Testing with non-existent ID...');\n    const fakeId = 'fake-id-12345';\n    try {\n      await makeRequest(baseUrl, `/api/clients?id=${fakeId}`, 'GET');\n      console.log('❌ Should have failed but succeeded');\n    } catch (error) {\n      if (error.message.includes('404') || error.message.includes('not found')) {\n        console.log('✅ Correctly returned 404 for non-existent client');\n      } else {\n        console.log('❌ Unexpected error for non-existent client:', error.message);\n      }\n    }\n    \n    console.log('\\n📊 Test Summary:');\n    console.log('- ✅ All clients API working');\n    console.log('- ✅ Client details API working with query parameters');\n    console.log('- ✅ Problematic client ID should now work');\n    console.log('- ✅ Non-existent client correctly returns 404');\n    \n  } catch (error) {\n    console.log('❌ Test failed:', error.message);\n  }\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          // Check if response is HTML (indicating routing issue)\n          if (responseData.includes('<!DOCTYPE html>') || responseData.includes('<html')) {\n            reject(new Error(`API routing issue - received HTML instead of JSON: ${responseData.substring(0, 200)}...`));\n            return;\n          }\n          \n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData.substring(0, 200)}...`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestClientDetailsFixed()\n  .then(() => {\n    console.log('\\n🚀 Fixed client details test completed!');\n    console.log('\\n🎯 Next Steps:');\n    console.log('1. Deploy these changes to Vercel');\n    console.log('2. Test the client details page in your browser');\n    console.log('3. The \"Client not found\" error should be resolved');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test execution failed:', error);\n  }); ","size_bytes":4925},"test-client-details.js":{"content":"// Test script to debug client details issue\nimport https from 'https';\n\nasync function testClientDetails() {\n  console.log('🔍 Testing Client Details API...\\n');\n  \n  try {\n    // Step 1: Get all clients\n    console.log('1️⃣ Getting all clients...');\n    const clients = await makeRequest('client-vault-pi.vercel.app', '/api/clients', 'GET');\n    console.log('✅ Found clients:', clients.length);\n    \n    if (clients.length === 0) {\n      console.log('❌ No clients found in database');\n      return;\n    }\n    \n    // Step 2: Display client IDs\n    console.log('\\n2️⃣ Client IDs in database:');\n    clients.forEach((client, index) => {\n      console.log(`   ${index + 1}. ${client.name} - ID: ${client.id}`);\n    });\n    \n    // Step 3: Test getting first client details\n    console.log('\\n3️⃣ Testing client details for first client...');\n    const firstClient = clients[0];\n    console.log(`   Testing ID: ${firstClient.id}`);\n    \n    try {\n      const clientDetails = await makeRequest('client-vault-pi.vercel.app', `/api/clients/${firstClient.id}`, 'GET');\n      console.log('✅ Client details retrieved successfully:', {\n        id: clientDetails.id,\n        name: clientDetails.name,\n        phone: clientDetails.phone,\n        paymentCodesCount: clientDetails.paymentCodes?.length || 0\n      });\n    } catch (error) {\n      console.log('❌ Failed to get client details:', error.message);\n    }\n    \n    // Step 4: Test with the problematic ID from the URL\n    console.log('\\n4️⃣ Testing the problematic client ID from URL...');\n    const problematicId = '9afc37ee-0579-485e-ad34-5269fc987429';\n    console.log(`   Testing ID: ${problematicId}`);\n    \n    try {\n      const problematicClient = await makeRequest('client-vault-pi.vercel.app', `/api/clients/${problematicId}`, 'GET');\n      console.log('✅ Problematic client found:', problematicClient);\n    } catch (error) {\n      console.log('❌ Problematic client not found:', error.message);\n      \n      // Check if this ID exists in our client list\n      const exists = clients.find(c => c.id === problematicId);\n      if (exists) {\n        console.log('⚠️  ID exists in client list but API call failed');\n      } else {\n        console.log('✅ ID does not exist in client list - this is expected');\n      }\n    }\n    \n    // Step 5: Test with a non-existent ID\n    console.log('\\n5️⃣ Testing with a non-existent ID...');\n    const fakeId = 'fake-id-12345';\n    try {\n      await makeRequest('client-vault-pi.vercel.app', `/api/clients/${fakeId}`, 'GET');\n      console.log('❌ Should have failed but succeeded');\n    } catch (error) {\n      if (error.message.includes('404')) {\n        console.log('✅ Correctly returned 404 for non-existent client');\n      } else {\n        console.log('❌ Unexpected error for non-existent client:', error.message);\n      }\n    }\n    \n    console.log('\\n📊 Summary:');\n    console.log(`- Total clients in database: ${clients.length}`);\n    console.log('- Client IDs:', clients.map(c => c.id).join(', '));\n    console.log('- Problematic ID exists:', clients.some(c => c.id === '9afc37ee-0579-485e-ad34-5269fc987429'));\n    \n  } catch (error) {\n    console.log('❌ Test failed:', error.message);\n  }\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData}`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestClientDetails()\n  .then(() => {\n    console.log('\\n🚀 Client details test completed!');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test execution failed:', error);\n  }); ","size_bytes":4564},"test-firebase-connection.js":{"content":"// Simple test script to verify Firebase connection\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Load environment variables from .env file if it exists\ntry {\n  const envContent = readFileSync(join(__dirname, '.env'), 'utf8');\n  const envLines = envContent.split('\\n');\n  envLines.forEach(line => {\n    const [key, value] = line.split('=');\n    if (key && value) {\n      process.env[key.trim()] = value.trim();\n    }\n  });\n} catch (error) {\n  console.log('No .env file found, using existing environment variables');\n}\n\nconsole.log('Testing Firebase connection...');\nconsole.log('Environment variables check:');\nconsole.log('- VITE_FIREBASE_API_KEY:', process.env.VITE_FIREBASE_API_KEY ? '✓ Set' : '✗ Missing');\nconsole.log('- VITE_FIREBASE_PROJECT_ID:', process.env.VITE_FIREBASE_PROJECT_ID ? '✓ Set' : '✗ Missing');\nconsole.log('- VITE_FIREBASE_APP_ID:', process.env.VITE_FIREBASE_APP_ID ? '✓ Set' : '✗ Missing');\n\n// Import and test the connection\nimport('./server/firebase-config.ts')\n  .then(async ({ testFirebaseConnection }) => {\n    try {\n      const result = await testFirebaseConnection();\n      console.log('\\nConnection test result:', JSON.stringify(result, null, 2));\n    } catch (error) {\n      console.error('\\nError testing connection:', error);\n    }\n  })\n  .catch(error => {\n    console.error('Error loading firebase-config:', error);\n  });\n","size_bytes":1529},"test-firebase-local.js":{"content":"// Simple local test for Firebase connection\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, doc, getDoc } from 'firebase/firestore';\n\n// Set environment variables for testing\nprocess.env.VITE_FIREBASE_API_KEY = \"AIzaSyDnD79096i5eYtYd0sgupdwZIOVZsWC4Lw\";\nprocess.env.VITE_FIREBASE_PROJECT_ID = \"recharging-mobiles-online\";\nprocess.env.VITE_FIREBASE_APP_ID = \"1:258902263753:web:e1e0b6c7adabbec4714a18\";\nprocess.env.VITE_FIREBASE_MESSAGING_SENDER_ID = \"258902263753\";\n\nasync function testFirebaseConnection() {\n  try {\n    console.log('Testing Firebase connection locally...');\n    console.log('Environment variables check:');\n    console.log('- VITE_FIREBASE_API_KEY:', process.env.VITE_FIREBASE_API_KEY ? '✓ Set' : '✗ Missing');\n    console.log('- VITE_FIREBASE_PROJECT_ID:', process.env.VITE_FIREBASE_PROJECT_ID ? '✓ Set' : '✗ Missing');\n    console.log('- VITE_FIREBASE_APP_ID:', process.env.VITE_FIREBASE_APP_ID ? '✓ Set' : '✗ Missing');\n    console.log('- VITE_FIREBASE_MESSAGING_SENDER_ID:', process.env.VITE_FIREBASE_MESSAGING_SENDER_ID ? '✓ Set' : '✗ Missing');\n\n    // Firebase configuration\n    const firebaseConfig = {\n      apiKey: process.env.VITE_FIREBASE_API_KEY,\n      authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n      projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n      storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n      messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n      appId: process.env.VITE_FIREBASE_APP_ID,\n    };\n\n    console.log('\\nInitializing Firebase...');\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app);\n\n    console.log('Testing Firestore connection...');\n    // Test Firestore connection by attempting to read from a test collection\n    const testDocRef = doc(db, \"test\", \"connection\");\n    const docSnapshot = await getDoc(testDocRef);\n    \n    console.log('✅ Firebase connection test completed successfully!');\n    console.log('📄 Test document exists:', docSnapshot.exists());\n    console.log('🏗️  Project ID:', process.env.VITE_FIREBASE_PROJECT_ID);\n    \n    return {\n      success: true,\n      message: \"Firebase connection successful\",\n      details: {\n        documentExists: docSnapshot.exists(),\n        projectId: process.env.VITE_FIREBASE_PROJECT_ID\n      }\n    };\n    \n  } catch (error) {\n    console.error('❌ Firebase connection test failed:', error);\n    return {\n      success: false,\n      message: error instanceof Error ? error.message : \"Unknown Firebase connection error\",\n      details: {\n        error: error instanceof Error ? error.message : error,\n        projectId: process.env.VITE_FIREBASE_PROJECT_ID\n      }\n    };\n  }\n}\n\n// Run the test\ntestFirebaseConnection()\n  .then(result => {\n    console.log('\\n🎯 Final Result:', JSON.stringify(result, null, 2));\n    if (result.success) {\n      console.log('🎉 Firebase is working correctly!');\n    } else {\n      console.log('💥 Firebase connection failed!');\n    }\n  })\n  .catch(error => {\n    console.error('💥 Test execution failed:', error);\n  }); ","size_bytes":3128},"test-query-params.js":{"content":"// Test script to check query parameters\nimport https from 'https';\n\nasync function testQueryParams() {\n  console.log('🔍 Testing Query Parameters...\\n');\n  \n  const baseUrl = 'client-vault-pi.vercel.app';\n  \n  // Test 1: Get all clients (no query params)\n  console.log('1️⃣ Testing GET /api/clients (no query params)...');\n  try {\n    const clients = await makeRequest(baseUrl, '/api/clients', 'GET');\n    console.log('✅ All clients response length:', Array.isArray(clients) ? clients.length : 'Not an array');\n  } catch (error) {\n    console.log('❌ Failed:', error.message);\n  }\n  \n  // Test 2: Get specific client with query param\n  console.log('\\n2️⃣ Testing GET /api/clients?id=test-id...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/clients?id=test-id', 'GET');\n    console.log('✅ Response type:', typeof result);\n    console.log('✅ Response is array:', Array.isArray(result));\n    if (Array.isArray(result)) {\n      console.log('✅ Array length:', result.length);\n    } else {\n      console.log('✅ Single object response');\n    }\n  } catch (error) {\n    console.log('❌ Failed:', error.message);\n  }\n  \n  // Test 3: Get with empty query param\n  console.log('\\n3️⃣ Testing GET /api/clients?id=...');\n  try {\n    const result = await makeRequest(baseUrl, '/api/clients?id=', 'GET');\n    console.log('✅ Response type:', typeof result);\n    console.log('✅ Response is array:', Array.isArray(result));\n  } catch (error) {\n    console.log('❌ Failed:', error.message);\n  }\n}\n\nfunction makeRequest(hostname, path, method, data = null) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      hostname,\n      port: 443,\n      path,\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (data) {\n      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    }\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          // Check if response is HTML (indicating routing issue)\n          if (responseData.includes('<!DOCTYPE html>') || responseData.includes('<html')) {\n            reject(new Error(`API routing issue - received HTML instead of JSON: ${responseData.substring(0, 200)}...`));\n            return;\n          }\n          \n          const parsed = JSON.parse(responseData);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(parsed);\n          } else {\n            reject(new Error(`${res.statusCode}: ${parsed.message || responseData}`));\n          }\n        } catch (error) {\n          reject(new Error(`Failed to parse response: ${responseData.substring(0, 200)}...`));\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (data) {\n      req.write(JSON.stringify(data));\n    }\n    \n    req.end();\n  });\n}\n\n// Run the test\ntestQueryParams()\n  .then(() => {\n    console.log('\\n🚀 Query parameters test completed!');\n  })\n  .catch((error) => {\n    console.error('\\n💥 Test execution failed:', error);\n  }); ","size_bytes":3193},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    ...(process.env.NODE_ENV !== \"production\" ? [runtimeErrorOverlay()] : []),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"client/dist\"),\n    emptyOutDir: true,\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: [\"react\", \"react-dom\"],\n          ui: [\"@radix-ui/react-dialog\", \"@radix-ui/react-dropdown-menu\"],\n        },\n      },\n    },\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1249},"api/clients-simple.js":{"content":"// Simplified Vercel serverless function for client operations (without Firebase)\nimport { randomUUID } from 'crypto';\n\n// Temporary in-memory storage for testing\nlet clients = [];\nlet paymentCodes = [];\nlet services = [];\n\nexport default async function handler(req, res) {\n  console.log(`[${new Date().toISOString()}] ${req.method} /api/clients - Starting request`);\n  \n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  try {\n    switch (req.method) {\n      case 'GET':\n        console.log('Getting all clients...');\n        // Return clients with payment codes\n        const clientsWithCodes = clients.map(client => ({\n          ...client,\n          paymentCodes: paymentCodes\n            .filter(code => code.clientId === client.id)\n            .map(code => {\n              const service = services.find(s => s.id === code.serviceId);\n              return {\n                ...code,\n                service: service || { id: \"\", name: \"Unknown Service\", color: \"#gray\", icon: \"\" }\n              };\n            })\n        }));\n\n        console.log(`Retrieved ${clientsWithCodes.length} clients successfully`);\n        res.status(200).json(clientsWithCodes);\n        break;\n\n      case 'POST':\n        console.log('Creating new client with data:', req.body);\n        \n        // Create new client\n        const { name, phone, paymentCodes: newPaymentCodes = [] } = req.body;\n        \n        if (!name || !phone) {\n          console.log('Missing required fields:', { name: !!name, phone: !!phone });\n          return res.status(400).json({ \n            message: \"Name and phone are required\" \n          });\n        }\n\n        console.log('Checking for duplicate client name...');\n        // Check for duplicate client name\n        const existingClient = clients.find(c => c.name === name);\n        \n        if (existingClient) {\n          console.log('Duplicate client name found:', name);\n          return res.status(400).json({ \n            message: `Client with name \"${name}\" already exists` \n          });\n        }\n\n        console.log('Creating client...');\n        // Create client\n        const clientId = randomUUID();\n        const clientData = {\n          id: clientId,\n          name,\n          phone,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        clients.push(clientData);\n        console.log('Client created successfully:', clientId);\n\n        // Create payment codes if provided\n        if (newPaymentCodes && newPaymentCodes.length > 0) {\n          console.log('Creating payment codes:', newPaymentCodes.length);\n          for (const codeData of newPaymentCodes) {\n            if (codeData.serviceId && codeData.code) {\n              const codeId = randomUUID();\n              const paymentCode = {\n                id: codeId,\n                clientId,\n                serviceId: codeData.serviceId,\n                code: codeData.code,\n                createdAt: new Date(),\n                updatedAt: new Date()\n              };\n              paymentCodes.push(paymentCode);\n              console.log('Payment code created:', codeId);\n            }\n          }\n        }\n\n        console.log('Client creation completed successfully');\n        res.status(201).json(clientData);\n        break;\n\n      default:\n        res.status(405).json({ \n          message: 'Method not allowed' \n        });\n    }\n  } catch (error) {\n    console.error('Error in clients API:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    console.error('Request method:', req.method);\n    \n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message,\n      details: {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        hasBody: !!req.body\n      }\n    });\n  }\n} ","size_bytes":4095},"api/clients.js":{"content":"// Vercel serverless function for client operations with Firebase\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, doc, getDocs, getDoc, setDoc, updateDoc, deleteDoc, query, where, limit } from 'firebase/firestore';\nimport { randomUUID } from 'crypto';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nlet app, db;\n\ntry {\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n  console.log('Firebase initialized successfully');\n} catch (error) {\n  console.error('Firebase initialization error:', error);\n  throw error;\n}\n\nexport default async function handler(req, res) {\n  console.log(`[${new Date().toISOString()}] ${req.method} /api/clients - Starting request`);\n  console.log('Request query:', req.query);\n  console.log('Request method:', req.method);\n  \n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Validate environment variables\n  const requiredEnvVars = [\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_APP_ID'\n  ];\n  \n  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    console.error('Missing environment variables:', missingVars);\n    return res.status(500).json({\n      message: \"Missing required Firebase environment variables\",\n      details: { missingVariables: missingVars }\n    });\n  }\n\n  try {\n    switch (req.method) {\n      case 'GET':\n        const { id } = req.query;\n        \n        console.log('GET request - Query parameters:', req.query);\n        console.log('GET request - ID parameter:', id);\n        console.log('GET request - ID type:', typeof id);\n        console.log('GET request - ID truthy check:', !!id);\n        \n        if (id) {\n          // Get specific client by ID\n          console.log('Getting specific client by ID:', id);\n          \n          const clientDoc = await getDoc(doc(db, \"clients\", id));\n          if (!clientDoc.exists()) {\n            console.log('Client not found in Firebase:', id);\n            return res.status(404).json({ message: \"Client not found\" });\n          }\n\n          const client = { id: clientDoc.id, ...clientDoc.data() };\n          console.log('Client found:', { id: client.id, name: client.name });\n          \n          // Get payment codes for this client\n          const paymentCodesQuery = query(\n            collection(db, \"paymentCodes\"),\n            where(\"clientId\", \"==\", id)\n          );\n          const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n          console.log('Found payment codes:', paymentCodesSnapshot.size);\n          \n          // Get all services\n          const servicesSnapshot = await getDocs(collection(db, \"services\"));\n          const services = servicesSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          console.log('Found services:', services.length);\n\n          // Combine payment codes with service information\n          const paymentCodes = paymentCodesSnapshot.docs.map(doc => {\n            const codeData = { id: doc.id, ...doc.data() };\n            const service = services.find(s => s.id === codeData.serviceId);\n            return {\n              ...codeData,\n              service: service || { id: \"\", name: \"Unknown Service\", color: \"#gray\", icon: \"\" }\n            };\n          });\n\n          const clientWithCodes = {\n            ...client,\n            paymentCodes\n          };\n\n          console.log('Returning client with codes:', {\n            id: clientWithCodes.id,\n            name: clientWithCodes.name,\n            paymentCodesCount: clientWithCodes.paymentCodes.length\n          });\n\n          res.status(200).json(clientWithCodes);\n        } else {\n          // Get all clients\n          console.log('Getting all clients from Firebase...');\n          try {\n            const [clientsSnapshot, paymentCodesSnapshot, servicesSnapshot] = await Promise.all([\n              getDocs(collection(db, \"clients\")),\n              getDocs(collection(db, \"paymentCodes\")),\n              getDocs(collection(db, \"services\"))\n            ]);\n\n            const clients = clientsSnapshot.docs.map(doc => ({\n              id: doc.id,\n              ...doc.data()\n            }));\n\n            const paymentCodes = paymentCodesSnapshot.docs.map(doc => ({\n              id: doc.id,\n              ...doc.data()\n            }));\n\n            const services = servicesSnapshot.docs.map(doc => ({\n              id: doc.id,\n              ...doc.data()\n            }));\n\n            // Combine clients with their payment codes and services\n            const clientsWithCodes = clients.map(client => ({\n              ...client,\n              paymentCodes: paymentCodes\n                .filter(code => code.clientId === client.id)\n                .map(code => {\n                  const service = services.find(s => s.id === code.serviceId);\n                  return {\n                    ...code,\n                    service: service || { id: \"\", name: \"Unknown Service\", color: \"#gray\", icon: \"\" }\n                  };\n                })\n            }));\n\n            console.log(`Retrieved ${clientsWithCodes.length} clients successfully from Firebase`);\n            res.status(200).json(clientsWithCodes);\n          } catch (error) {\n            console.error('Error in GET clients:', error);\n            throw error;\n          }\n        }\n        break;\n\n      case 'POST':\n        console.log('Creating new client in Firebase with data:', req.body);\n        \n        // Create new client\n        const { name, phone, paymentCodes: newPaymentCodes = [] } = req.body;\n        \n        if (!name || !phone) {\n          console.log('Missing required fields:', { name: !!name, phone: !!phone });\n          return res.status(400).json({ \n            message: \"Name and phone are required\" \n          });\n        }\n\n        console.log('Checking for duplicate client name in Firebase...');\n        // Check for duplicate client name\n        const existingClientQuery = query(\n          collection(db, \"clients\"),\n          where(\"name\", \"==\", name),\n          limit(1)\n        );\n        const existingClientSnapshot = await getDocs(existingClientQuery);\n        \n        if (!existingClientSnapshot.empty) {\n          console.log('Duplicate client name found:', name);\n          return res.status(400).json({ \n            message: `Client with name \"${name}\" already exists` \n          });\n        }\n\n        console.log('Creating client in Firebase...');\n        // Create client\n        const clientId = randomUUID();\n        const clientData = {\n          id: clientId,\n          name,\n          phone,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        await setDoc(doc(db, \"clients\", clientId), clientData);\n        console.log('Client created successfully in Firebase:', clientId);\n\n        // Create payment codes if provided\n        if (newPaymentCodes && newPaymentCodes.length > 0) {\n          console.log('Creating payment codes in Firebase:', newPaymentCodes.length);\n          for (const codeData of newPaymentCodes) {\n            if (codeData.serviceId && codeData.code) {\n              const codeId = randomUUID();\n              await setDoc(doc(db, \"paymentCodes\", codeId), {\n                id: codeId,\n                clientId,\n                serviceId: codeData.serviceId,\n                code: codeData.code,\n                createdAt: new Date(),\n                updatedAt: new Date()\n              });\n              console.log('Payment code created in Firebase:', codeId);\n            }\n          }\n        }\n\n        console.log('Client creation completed successfully in Firebase');\n        res.status(201).json(clientData);\n        break;\n\n      case 'PUT':\n        const { id: updateId, ...updateData } = req.body;\n        \n        if (!updateId) {\n          return res.status(400).json({ \n            message: \"Client ID is required\" \n          });\n        }\n\n        console.log('Updating client in Firebase:', updateId);\n        \n        // Update client\n        const { name: updateName, phone: updatePhone, paymentCodes: updatePaymentCodes = [] } = updateData;\n        \n        if (!updateName || !updatePhone) {\n          return res.status(400).json({ \n            message: \"Name and phone are required\" \n          });\n        }\n\n        // Update client data\n        await updateDoc(doc(db, \"clients\", updateId), {\n          name: updateName,\n          phone: updatePhone,\n          updatedAt: new Date()\n        });\n\n        // Delete existing payment codes\n        const existingCodesQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"clientId\", \"==\", updateId)\n        );\n        const existingCodesSnapshot = await getDocs(existingCodesQuery);\n        \n        for (const codeDoc of existingCodesSnapshot.docs) {\n          await deleteDoc(codeDoc.ref);\n        }\n\n        // Create new payment codes\n        for (const codeData of updatePaymentCodes) {\n          const codeId = randomUUID();\n          await setDoc(doc(db, \"paymentCodes\", codeId), {\n            id: codeId,\n            clientId: updateId,\n            serviceId: codeData.serviceId,\n            code: codeData.code,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n        }\n\n        console.log('Client updated successfully in Firebase:', updateId);\n        res.status(200).json({ message: \"Client updated successfully\" });\n        break;\n\n      case 'DELETE':\n        const { id: deleteId } = req.query;\n        \n        if (!deleteId) {\n          return res.status(400).json({ \n            message: \"Client ID is required\" \n          });\n        }\n\n        console.log('Deleting client from Firebase:', deleteId);\n        \n        // Delete client and associated payment codes\n        const codesToDeleteQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"clientId\", \"==\", deleteId)\n        );\n        const codesToDeleteSnapshot = await getDocs(codesToDeleteQuery);\n        \n        for (const codeDoc of codesToDeleteSnapshot.docs) {\n          await deleteDoc(codeDoc.ref);\n        }\n\n        await deleteDoc(doc(db, \"clients\", deleteId));\n        console.log('Client deleted successfully from Firebase:', deleteId);\n        res.status(200).json({ message: \"Client deleted successfully\" });\n        break;\n\n      default:\n        res.status(405).json({ \n          message: 'Method not allowed' \n        });\n    }\n  } catch (error) {\n    console.error('Error in clients API:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    console.error('Request method:', req.method);\n    \n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message,\n      details: {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        hasBody: !!req.body\n      }\n    });\n  }\n} ","size_bytes":11596},"api/services.js":{"content":"// Vercel serverless function for service operations with Firebase\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, doc, getDocs, getDoc, setDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { randomUUID } from 'crypto';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nlet app, db;\n\ntry {\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n  console.log('Firebase initialized successfully in services API');\n} catch (error) {\n  console.error('Firebase initialization error in services API:', error);\n  throw error;\n}\n\nexport default async function handler(req, res) {\n  console.log(`[${new Date().toISOString()}] ${req.method} /api/services - Starting request`);\n  \n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Validate environment variables\n  const requiredEnvVars = [\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_APP_ID'\n  ];\n  \n  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    console.error('Missing environment variables:', missingVars);\n    return res.status(500).json({\n      message: \"Missing required Firebase environment variables\",\n      details: { missingVariables: missingVars }\n    });\n  }\n\n  try {\n    switch (req.method) {\n      case 'GET':\n        console.log('Getting all services from Firebase...');\n        try {\n          const servicesSnapshot = await getDocs(collection(db, \"services\"));\n          const services = servicesSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          console.log(`Retrieved ${services.length} services successfully from Firebase`);\n          res.status(200).json(services);\n        } catch (error) {\n          console.error('Error in GET services:', error);\n          throw error;\n        }\n        break;\n\n      case 'POST':\n        console.log('Creating new service in Firebase with data:', req.body);\n        \n        // Create new service\n        const { name, color, icon } = req.body;\n        \n        if (!name || !color || !icon) {\n          console.log('Missing required fields:', { name: !!name, color: !!color, icon: !!icon });\n          return res.status(400).json({ \n            message: \"Name, color, and icon are required\" \n          });\n        }\n\n        // Check for duplicate service name\n        const existingServiceQuery = query(\n          collection(db, \"services\"),\n          where(\"name\", \"==\", name)\n        );\n        const existingServiceSnapshot = await getDocs(existingServiceQuery);\n        \n        if (!existingServiceSnapshot.empty) {\n          console.log('Duplicate service name found:', name);\n          return res.status(400).json({ \n            message: `Service with name \"${name}\" already exists` \n          });\n        }\n\n        const serviceId = randomUUID();\n        const serviceData = {\n          id: serviceId,\n          name,\n          color,\n          icon,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        await setDoc(doc(db, \"services\", serviceId), serviceData);\n        console.log('Service created successfully in Firebase:', serviceId);\n        res.status(201).json(serviceData);\n        break;\n\n      case 'PUT':\n        console.log('Updating service in Firebase with data:', req.body);\n        \n        const { id, ...updateData } = req.body;\n        \n        if (!id) {\n          return res.status(400).json({ \n            message: \"Service ID is required\" \n          });\n        }\n\n        const serviceRef = doc(db, \"services\", id);\n        const serviceDoc = await getDoc(serviceRef);\n        \n        if (!serviceDoc.exists()) {\n          return res.status(404).json({ \n            message: \"Service not found\" \n          });\n        }\n\n        await updateDoc(serviceRef, {\n          ...updateData,\n          updatedAt: new Date()\n        });\n\n        const updatedServiceDoc = await getDoc(serviceRef);\n        const updatedService = { id: updatedServiceDoc.id, ...updatedServiceDoc.data() };\n        \n        console.log('Service updated successfully in Firebase:', id);\n        res.status(200).json(updatedService);\n        break;\n\n      case 'DELETE':\n        console.log('Deleting service from Firebase:', req.query.id);\n        \n        const deleteId = req.query.id;\n        \n        if (!deleteId) {\n          return res.status(400).json({ \n            message: \"Service ID is required\" \n          });\n        }\n\n        // Check if service has associated payment codes\n        const paymentCodesQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"serviceId\", \"==\", deleteId)\n        );\n        const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n        \n        if (!paymentCodesSnapshot.empty) {\n          return res.status(400).json({ \n            message: \"Cannot delete service with existing payment codes\" \n          });\n        }\n\n        await deleteDoc(doc(db, \"services\", deleteId));\n        console.log('Service deleted successfully from Firebase:', deleteId);\n        res.status(200).json({ message: \"Service deleted successfully\" });\n        break;\n\n      default:\n        res.status(405).json({ \n          message: 'Method not allowed' \n        });\n    }\n  } catch (error) {\n    console.error('Error in services API:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    console.error('Request method:', req.method);\n    \n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message,\n      details: {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        hasBody: !!req.body\n      }\n    });\n  }\n} ","size_bytes":6437},"api/settings.js":{"content":"// Vercel serverless function for settings operations\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport default async function handler(req, res) {\n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  try {\n    switch (req.method) {\n      case 'GET':\n        // Get settings\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"app\"));\n        if (settingsDoc.exists()) {\n          const data = settingsDoc.data();\n          const { createdAt, updatedAt, ...settings } = data;\n          res.status(200).json(settings);\n        } else {\n          res.status(200).json({});\n        }\n        break;\n\n      case 'POST':\n        // Save settings\n        await setDoc(doc(db, \"settings\", \"app\"), {\n          ...req.body,\n          updatedAt: new Date()\n        }, { merge: true });\n        \n        res.status(200).json({ message: \"Settings saved successfully\" });\n        break;\n\n      default:\n        res.status(405).json({ \n          message: 'Method not allowed' \n        });\n    }\n  } catch (error) {\n    console.error('Error in settings API:', error);\n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message \n    });\n  }\n} ","size_bytes":2040},"api/test.js":{"content":"// Simple test API endpoint\nexport default async function handler(req, res) {\n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  try {\n    console.log('Test API called successfully');\n    \n    res.status(200).json({ \n      message: 'Test API is working',\n      timestamp: new Date().toISOString(),\n      method: req.method,\n      body: req.body\n    });\n  } catch (error) {\n    console.error('Test API error:', error);\n    res.status(500).json({ \n      message: 'Test API error',\n      error: error.message \n    });\n  }\n} ","size_bytes":788},"server/firebase-config.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc } from \"firebase/firestore\";\n\n// Server-side Firebase configuration using environment variables\nconst getFirebaseConfig = () => {\n  const requiredEnvVars = [\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_PROJECT_ID',\n    'VITE_FIREBASE_APP_ID'\n  ];\n  \n  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    throw new Error(`Missing required Firebase environment variables: ${missingVars.join(', ')}`);\n  }\n\n  return {\n    apiKey: process.env.VITE_FIREBASE_API_KEY!,\n    authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n    projectId: process.env.VITE_FIREBASE_PROJECT_ID!,\n    storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n    messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n    appId: process.env.VITE_FIREBASE_APP_ID!,\n  };\n};\n\nlet app: ReturnType<typeof initializeApp>;\nlet db: ReturnType<typeof getFirestore>;\n\ntry {\n  const firebaseConfig = getFirebaseConfig();\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n} catch (error) {\n  console.error(\"Firebase initialization failed:\", error);\n  throw error;\n}\n\n// Test Firebase connection for server\nexport const testFirebaseConnection = async (): Promise<{ \n  success: boolean; \n  message: string; \n  details?: any \n}> => {\n  try {\n    console.log(\"Testing Firebase connection...\");\n    \n    // Check if Firebase is properly initialized\n    if (!app || !db) {\n      return {\n        success: false,\n        message: \"Firebase not properly initialized\",\n        details: { app: !!app, db: !!db }\n      };\n    }\n\n    // Test Firestore connection by attempting to read from a test collection\n    const testDocRef = doc(db, \"test\", \"connection\");\n    const docSnapshot = await getDoc(testDocRef);\n    \n    console.log(\"Firebase connection test completed successfully\");\n    \n    return {\n      success: true,\n      message: \"Firebase connection successful\",\n      details: {\n        documentExists: docSnapshot.exists(),\n        projectId: process.env.VITE_FIREBASE_PROJECT_ID\n      }\n    };\n  } catch (error) {\n    console.error(\"Firebase connection test failed:\", {\n      error: error instanceof Error ? error.message : error,\n      stack: error instanceof Error ? error.stack : undefined,\n      projectId: process.env.VITE_FIREBASE_PROJECT_ID\n    });\n    \n    return {\n      success: false,\n      message: error instanceof Error ? error.message : \"Unknown Firebase connection error\",\n      details: {\n        error: error instanceof Error ? error.message : error,\n        projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n        apiKeyConfigured: !!process.env.VITE_FIREBASE_API_KEY,\n        projectIdConfigured: !!process.env.VITE_FIREBASE_PROJECT_ID,\n        appIdConfigured: !!process.env.VITE_FIREBASE_APP_ID\n      }\n    };\n  }\n};\n\nexport { app, db };\n","size_bytes":2956},"server/firebase-storage.ts":{"content":"import { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy,\n  Timestamp,\n  setDoc,\n  limit \n} from \"firebase/firestore\";\n\n// Helper function to convert Firestore timestamps to JavaScript Date objects\nfunction convertTimestamps(data: any): any {\n  if (data === null || data === undefined) {\n    return data;\n  }\n  \n  if (typeof data === 'object' && data.constructor === Object) {\n    // Check if this is a Firestore timestamp\n    if (data.type === 'firestore/timestamp/1.0' && typeof data.seconds === 'number') {\n      return new Date(data.seconds * 1000 + (data.nanoseconds || 0) / 1000000);\n    }\n    \n    // Recursively convert object properties\n    const converted: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      converted[key] = convertTimestamps(value);\n    }\n    return converted;\n  }\n  \n  if (Array.isArray(data)) {\n    return data.map(convertTimestamps);\n  }\n  \n  return data;\n}\n\n// Helper function to serialize data with proper timestamp conversion for JSON response\nfunction serializeForResponse(data: any): any {\n  const converted = convertTimestamps(data);\n  return JSON.parse(JSON.stringify(converted, (key, value) => {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    return value;\n  }));\n}\nimport { db } from \"./firebase-config\";\nimport type { \n  Client, \n  Service, \n  PaymentCode, \n  ClientWithCodes, \n  InsertClient, \n  InsertService, \n  InsertPaymentCode,\n  SearchHistory,\n  InsertSearchHistory,\n  DashboardStats\n} from \"../shared/schema\";\nimport type { IStorage } from \"./storage\";\nimport { randomUUID } from \"crypto\";\n\nexport class FirebaseStorage implements IStorage {\n  \n  // Client operations\n  async createClient(data: InsertClient): Promise<Client> {\n    try {\n      const id = randomUUID();\n      const clientData = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      await setDoc(doc(db, \"clients\", id), clientData);\n      \n      return clientData;\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      throw new Error(\"Failed to create client in Firebase\");\n    }\n  }\n\n  async getAllClients(): Promise<ClientWithCodes[]> {\n    try {\n      const [clientsSnapshot, paymentCodesSnapshot, servicesSnapshot] = await Promise.all([\n        getDocs(collection(db, \"clients\")),\n        getDocs(collection(db, \"paymentCodes\")),\n        getDocs(collection(db, \"services\"))\n      ]);\n\n      const clients = clientsSnapshot.docs.map(doc => \n        convertTimestamps({ id: doc.id, ...doc.data() })\n      ) as Client[];\n\n      const paymentCodes = paymentCodesSnapshot.docs.map(doc => \n        convertTimestamps({ id: doc.id, ...doc.data() })\n      ) as PaymentCode[];\n\n      const services = servicesSnapshot.docs.map(doc => \n        convertTimestamps({ id: doc.id, ...doc.data() })\n      ) as Service[];\n\n      return clients.map(client => ({\n        ...client,\n        paymentCodes: paymentCodes.filter(code => code.clientId === client.id).map(code => {\n          const service = services.find(s => s.id === code.serviceId);\n          return {\n            ...code,\n            service: service || { id: '', name: 'Unknown Service', color: '#gray', icon: '', createdAt: null }\n          };\n        })\n      }));\n    } catch (error) {\n      console.error(\"Error getting clients:\", error);\n      throw new Error(\"Failed to get clients from Firebase\");\n    }\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    try {\n      const clientDoc = await getDoc(doc(db, \"clients\", id));\n      \n      if (!clientDoc.exists()) {\n        return undefined;\n      }\n\n      return { id: clientDoc.id, ...clientDoc.data() } as Client;\n    } catch (error) {\n      console.error(\"Error getting client:\", error);\n      throw new Error(\"Failed to get client from Firebase\");\n    }\n  }\n\n  async getClientByName(name: string): Promise<Client | undefined> {\n    try {\n      const clientsQuery = query(\n        collection(db, \"clients\"),\n        where(\"name\", \"==\", name),\n        limit(1)\n      );\n      const snapshot = await getDocs(clientsQuery);\n      \n      if (snapshot.empty) {\n        return undefined;\n      }\n\n      const doc = snapshot.docs[0];\n      return { id: doc.id, ...doc.data() } as Client;\n    } catch (error) {\n      console.error(\"Error getting client by name:\", error);\n      throw new Error(\"Failed to get client by name from Firebase\");\n    }\n  }\n\n  async getClientWithCodes(id: string): Promise<ClientWithCodes | undefined> {\n    try {\n      const clientDoc = await getDoc(doc(db, \"clients\", id));\n      \n      if (!clientDoc.exists()) {\n        return undefined;\n      }\n\n      const client = convertTimestamps({ id: clientDoc.id, ...clientDoc.data() }) as Client;\n      \n      const [paymentCodesSnapshot, servicesSnapshot] = await Promise.all([\n        getDocs(query(collection(db, \"paymentCodes\"), where(\"clientId\", \"==\", id))),\n        getDocs(collection(db, \"services\"))\n      ]);\n      \n      const services = servicesSnapshot.docs.map(doc => \n        convertTimestamps({ id: doc.id, ...doc.data() })\n      ) as Service[];\n\n      const paymentCodes = paymentCodesSnapshot.docs.map(doc => {\n        const codeData = convertTimestamps({ id: doc.id, ...doc.data() }) as PaymentCode;\n        const service = services.find(s => s.id === codeData.serviceId);\n        return {\n          ...codeData,\n          service: service || { id: '', name: 'Unknown Service', color: '#gray', icon: '', createdAt: null }\n        };\n      });\n\n      return {\n        ...client,\n        paymentCodes\n      };\n    } catch (error) {\n      console.error(\"Error getting client by ID:\", error);\n      throw new Error(\"Failed to get client from Firebase\");\n    }\n  }\n\n  async updateClient(id: string, data: Partial<InsertClient>): Promise<Client | undefined> {\n    try {\n      const clientRef = doc(db, \"clients\", id);\n      const updateData = {\n        ...data,\n        updatedAt: new Date()\n      };\n      \n      await updateDoc(clientRef, updateData);\n      \n      const updatedDoc = await getDoc(clientRef);\n      if (!updatedDoc.exists()) {\n        return undefined;\n      }\n      return { id: updatedDoc.id, ...updatedDoc.data() } as Client;\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      throw new Error(\"Failed to update client in Firebase\");\n    }\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    try {\n      // Delete associated payment codes first\n      const paymentCodesQuery = query(\n        collection(db, \"paymentCodes\"),\n        where(\"clientId\", \"==\", id)\n      );\n      const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n      \n      const deletePromises = paymentCodesSnapshot.docs.map(doc => \n        deleteDoc(doc.ref)\n      );\n      await Promise.all(deletePromises);\n      \n      // Delete the client\n      await deleteDoc(doc(db, \"clients\", id));\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      return false;\n    }\n  }\n\n  async searchClients(query: string): Promise<ClientWithCodes[]> {\n    try {\n      const clients = await this.getAllClients();\n      const searchTerm = query.toLowerCase();\n      \n      return clients.filter(client => \n        client.name.toLowerCase().includes(searchTerm) ||\n        client.phone.includes(searchTerm) ||\n        client.paymentCodes?.some(code => \n          code.code.toLowerCase().includes(searchTerm)\n        )\n      );\n    } catch (error) {\n      console.error(\"Error searching clients:\", error);\n      throw new Error(\"Failed to search clients in Firebase\");\n    }\n  }\n\n  // Service operations  \n  async createService(data: InsertService): Promise<Service> {\n    try {\n      const id = randomUUID();\n      const serviceData = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      await setDoc(doc(db, \"services\", id), serviceData);\n      \n      return serviceData;\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      throw new Error(\"Failed to create service in Firebase\");\n    }\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    try {\n      const serviceDoc = await getDoc(doc(db, \"services\", id));\n      \n      if (!serviceDoc.exists()) {\n        return undefined;\n      }\n\n      return { id: serviceDoc.id, ...serviceDoc.data() } as Service;\n    } catch (error) {\n      console.error(\"Error getting service:\", error);\n      throw new Error(\"Failed to get service from Firebase\");\n    }\n  }\n\n  async getAllServices(): Promise<Service[]> {\n    try {\n      const snapshot = await getDocs(collection(db, \"services\"));\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Service[];\n    } catch (error) {\n      console.error(\"Error getting services:\", error);\n      throw new Error(\"Failed to get services from Firebase\");\n    }\n  }\n\n  async updateService(id: string, data: Partial<InsertService>): Promise<Service | undefined> {\n    try {\n      const serviceRef = doc(db, \"services\", id);\n      const updateData = {\n        ...data,\n        updatedAt: new Date()\n      };\n      \n      await updateDoc(serviceRef, updateData);\n      \n      const updatedDoc = await getDoc(serviceRef);\n      if (!updatedDoc.exists()) {\n        return undefined;\n      }\n      return { id: updatedDoc.id, ...updatedDoc.data() } as Service;\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      throw new Error(\"Failed to update service in Firebase\");\n    }\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    try {\n      // Check if service has associated payment codes\n      const paymentCodesQuery = query(\n        collection(db, \"paymentCodes\"),\n        where(\"serviceId\", \"==\", id)\n      );\n      const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n      \n      if (!paymentCodesSnapshot.empty) {\n        throw new Error(\"Cannot delete service with existing payment codes\");\n      }\n      \n      await deleteDoc(doc(db, \"services\", id));\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      return false;\n    }\n  }\n\n  // Payment code operations\n  async getPaymentCodesByClient(clientId: string): Promise<(PaymentCode & { service: Service })[]> {\n    try {\n      const paymentCodesQuery = query(\n        collection(db, \"paymentCodes\"),\n        where(\"clientId\", \"==\", clientId)\n      );\n      const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n      const servicesSnapshot = await getDocs(collection(db, \"services\"));\n      \n      const services = servicesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Service[];\n      \n      return paymentCodesSnapshot.docs.map(doc => {\n        const paymentCode = { id: doc.id, ...doc.data() } as PaymentCode;\n        const service = services.find(s => s.id === paymentCode.serviceId) || {\n          id: '', name: '', color: '', icon: '', createdAt: null\n        };\n        return { ...paymentCode, service };\n      });\n    } catch (error) {\n      console.error(\"Error getting payment codes by client:\", error);\n      throw new Error(\"Failed to get payment codes from Firebase\");\n    }\n  }\n\n  async validateUniqueCode(serviceId: string, code: string, excludeId?: string): Promise<boolean> {\n    try {\n      const duplicateQuery = query(\n        collection(db, \"paymentCodes\"),\n        where(\"serviceId\", \"==\", serviceId),\n        where(\"code\", \"==\", code)\n      );\n      const duplicateSnapshot = await getDocs(duplicateQuery);\n      \n      if (excludeId) {\n        return duplicateSnapshot.docs.every(doc => doc.id === excludeId);\n      }\n      \n      return duplicateSnapshot.empty;\n    } catch (error) {\n      console.error(\"Error validating unique code:\", error);\n      return false;\n    }\n  }\n\n  async createPaymentCode(data: InsertPaymentCode): Promise<PaymentCode> {\n    try {\n      const id = randomUUID();\n      const paymentCodeData = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      await setDoc(doc(db, \"paymentCodes\", id), paymentCodeData);\n      \n      return paymentCodeData;\n    } catch (error) {\n      console.error(\"Error creating payment code:\", error);\n      throw new Error(\"Failed to create payment code in Firebase\");\n    }\n  }\n\n  async updatePaymentCode(id: string, data: Partial<InsertPaymentCode>): Promise<PaymentCode | undefined> {\n    try {\n      const paymentCodeRef = doc(db, \"paymentCodes\", id);\n      const updateData = {\n        ...data,\n        updatedAt: new Date()\n      };\n      \n      await updateDoc(paymentCodeRef, updateData);\n      \n      const updatedDoc = await getDoc(paymentCodeRef);\n      if (!updatedDoc.exists()) {\n        return undefined;\n      }\n      return { id: updatedDoc.id, ...updatedDoc.data() } as PaymentCode;\n    } catch (error) {\n      console.error(\"Error updating payment code:\", error);\n      throw new Error(\"Failed to update payment code in Firebase\");\n    }\n  }\n\n  async deletePaymentCode(id: string): Promise<boolean> {\n    try {\n      await deleteDoc(doc(db, \"paymentCodes\", id));\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting payment code:\", error);\n      return false;\n    }\n  }\n\n  // Search history  \n  async addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory> {\n    try {\n      const id = randomUUID();\n      const searchData = {\n        ...search,\n        id,\n        timestamp: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      await setDoc(doc(db, \"searchHistory\", id), searchData);\n      \n      return searchData;\n    } catch (error) {\n      console.error(\"Error adding search history:\", error);\n      throw new Error(\"Failed to add search history to Firebase\");\n    }\n  }\n\n  async getSearchHistory(limit: number = 10): Promise<SearchHistory[]> {\n    try {\n      const searchQuery = query(\n        collection(db, \"searchHistory\"),\n        orderBy(\"createdAt\", \"desc\")\n      );\n      const snapshot = await getDocs(searchQuery);\n      \n      return snapshot.docs.slice(0, limit).map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as SearchHistory[];\n    } catch (error) {\n      console.error(\"Error getting search history:\", error);\n      throw new Error(\"Failed to get search history from Firebase\");\n    }\n  }\n\n  // Settings operations\n  async saveSettings(settings: Record<string, any>): Promise<void> {\n    try {\n      const settingsRef = doc(db, \"settings\", \"app\");\n      await setDoc(settingsRef, {\n        ...settings,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      throw new Error(\"Failed to save settings to Firebase\");\n    }\n  }\n\n  async getSettings(): Promise<Record<string, any>> {\n    try {\n      const settingsDoc = await getDoc(doc(db, \"settings\", \"app\"));\n      \n      if (settingsDoc.exists()) {\n        const data = settingsDoc.data();\n        // Remove Firebase timestamps for client consumption\n        const { createdAt, updatedAt, ...settings } = data;\n        return settings;\n      }\n      \n      return {};\n    } catch (error) {\n      console.error(\"Error getting settings:\", error);\n      throw new Error(\"Failed to get settings from Firebase\");\n    }\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<DashboardStats> {\n    try {\n      const [clientsSnapshot, paymentCodesSnapshot, servicesSnapshot, searchSnapshot] = await Promise.all([\n        getDocs(collection(db, \"clients\")),\n        getDocs(collection(db, \"paymentCodes\")),\n        getDocs(collection(db, \"services\")),\n        getDocs(collection(db, \"searchHistory\"))\n      ]);\n\n      // Count searches from today\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const dailySearches = searchSnapshot.docs.filter(doc => {\n        const searchDate = doc.data().createdAt?.toDate();\n        return searchDate && searchDate >= today;\n      }).length;\n\n      return {\n        totalClients: clientsSnapshot.size,\n        totalCodes: paymentCodesSnapshot.size,\n        activeServices: servicesSnapshot.size,\n        dailySearches\n      };\n    } catch (error) {\n      console.error(\"Error getting dashboard stats:\", error);\n      throw new Error(\"Failed to get dashboard stats from Firebase\");\n    }\n  }\n}","size_bytes":16488},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertClientSchema, \n  insertServiceSchema, \n  insertPaymentCodeSchema,\n  insertSearchHistorySchema,\n  clientFormSchema\n} from \"@shared/schema\";\n\n// Helper function to convert Firestore timestamps to JavaScript Date objects\nfunction convertTimestamps(data: any): any {\n  if (data === null || data === undefined) {\n    return data;\n  }\n  \n  if (typeof data === 'object' && data.constructor === Object) {\n    // Check if this is a Firestore timestamp\n    if (data.type === 'firestore/timestamp/1.0' && typeof data.seconds === 'number') {\n      return new Date(data.seconds * 1000 + (data.nanoseconds || 0) / 1000000);\n    }\n    \n    // Recursively convert object properties\n    const converted: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      converted[key] = convertTimestamps(value);\n    }\n    return converted;\n  }\n  \n  if (Array.isArray(data)) {\n    return data.map(convertTimestamps);\n  }\n  \n  return data;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json(convertTimestamps(clients));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClientWithCodes(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const validation = clientFormSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid client data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const { paymentCodes, ...clientData } = validation.data;\n      \n      // Check for duplicate client name\n      const existingClient = await storage.getClientByName(clientData.name);\n      if (existingClient) {\n        return res.status(400).json({ \n          message: `Client with name \"${clientData.name}\" already exists` \n        });\n      }\n      \n      // Create client\n      const client = await storage.createClient(clientData);\n      \n      // Create payment codes\n      for (const codeData of paymentCodes) {\n        // Validate unique code\n        const isUnique = await storage.validateUniqueCode(codeData.serviceId, codeData.code);\n        if (!isUnique) {\n          return res.status(400).json({ \n            message: `Payment code ${codeData.code} already exists for this service` \n          });\n        }\n        \n        await storage.createPaymentCode({\n          clientId: client.id,\n          serviceId: codeData.serviceId,\n          code: codeData.code,\n        });\n      }\n\n      const clientWithCodes = await storage.getClientWithCodes(client.id);\n      res.status(201).json(clientWithCodes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const validation = clientFormSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid client data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const { paymentCodes, ...clientData } = validation.data;\n      \n      // Check for duplicate client name (excluding current client)\n      const existingClient = await storage.getClientByName(clientData.name);\n      if (existingClient && existingClient.id !== req.params.id) {\n        return res.status(400).json({ \n          message: `Client with name \"${clientData.name}\" already exists` \n        });\n      }\n      \n      // Update client\n      const client = await storage.updateClient(req.params.id, clientData);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n\n      // Delete existing payment codes\n      const existingCodes = await storage.getPaymentCodesByClient(req.params.id);\n      for (const code of existingCodes) {\n        await storage.deletePaymentCode(code.id);\n      }\n\n      // Create new payment codes\n      for (const codeData of paymentCodes) {\n        const isUnique = await storage.validateUniqueCode(codeData.serviceId, codeData.code);\n        if (!isUnique) {\n          return res.status(400).json({ \n            message: `Payment code ${codeData.code} already exists for this service` \n          });\n        }\n        \n        await storage.createPaymentCode({\n          clientId: client.id,\n          serviceId: codeData.serviceId,\n          code: codeData.code,\n        });\n      }\n\n      const clientWithCodes = await storage.getClientWithCodes(client.id);\n      res.json(clientWithCodes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteClient(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Search clients\n  app.get(\"/api/clients/search/:query\", async (req, res) => {\n    try {\n      const query = decodeURIComponent(req.params.query);\n      \n      // Add to search history\n      await storage.addSearchHistory({ query });\n      \n      const results = await storage.searchClients(query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search clients\" });\n    }\n  });\n\n  // Service routes\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const validation = insertServiceSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid service data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const service = await storage.createService(validation.data);\n      res.status(201).json(service);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put(\"/api/services/:id\", async (req, res) => {\n    try {\n      const validation = insertServiceSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid service data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const service = await storage.updateService(req.params.id, validation.data);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteService(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Payment codes CRUD\n  app.post(\"/api/payment-codes\", async (req, res) => {\n    try {\n      const validation = insertPaymentCodeSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid payment code data\", \n          errors: validation.error.errors \n        });\n      }\n\n      // Check if code is unique for the service\n      const isUnique = await storage.validateUniqueCode(validation.data.serviceId, validation.data.code);\n      if (!isUnique) {\n        return res.status(400).json({ \n          message: `Payment code ${validation.data.code} already exists for this service` \n        });\n      }\n\n      const paymentCode = await storage.createPaymentCode(validation.data);\n      res.status(201).json(paymentCode);\n    } catch (error) {\n      console.error(\"Error creating payment code:\", error);\n      res.status(500).json({ message: \"Failed to create payment code\" });\n    }\n  });\n\n  app.delete(\"/api/payment-codes/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePaymentCode(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Payment code not found\" });\n      }\n      res.json({ message: \"Payment code deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete payment code\" });\n    }\n  });\n\n  // Payment code validation\n  app.post(\"/api/payment-codes/validate\", async (req, res) => {\n    try {\n      const { serviceId, code, excludeId } = req.body;\n      const isUnique = await storage.validateUniqueCode(serviceId, code, excludeId);\n      res.json({ isUnique });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to validate payment code\" });\n    }\n  });\n\n  // Search history\n  app.get(\"/api/search-history\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const history = await storage.getSearchHistory(limit);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch search history\" });\n    }\n  });\n\n  // Export endpoints\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      \n      // Create CSV content\n      const headers = [\"Name\", \"Phone\", \"Service\", \"Payment Code\"];\n      const rows = [headers.join(\",\")];\n      \n      for (const client of clients) {\n        for (const code of client.paymentCodes) {\n          rows.push([\n            `\"${client.name}\"`,\n            `\"${client.phone}\"`,\n            `\"${code.service.name}\"`,\n            `\"${code.code}\"`\n          ].join(\",\"));\n        }\n      }\n      \n      const csvContent = rows.join(\"\\n\");\n      \n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", \"attachment; filename=clients-export.csv\");\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  // Settings routes\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ \n        message: \"Failed to fetch settings\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/settings\", async (req, res) => {\n    try {\n      await storage.saveSettings(req.body);\n      res.json({ message: \"Settings saved successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to save settings\" });\n    }\n  });\n\n  // Firebase connection test\n  app.post(\"/api/settings/test-connection\", async (req, res) => {\n    try {\n      console.log(\"Starting Firebase connection test...\");\n      \n      // Validate environment variables before attempting connection\n      const requiredEnvVars = [\n        'VITE_FIREBASE_API_KEY',\n        'VITE_FIREBASE_PROJECT_ID',\n        'VITE_FIREBASE_APP_ID'\n      ];\n      \n      const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n      \n      console.log(\"Environment variables check:\", {\n        apiKey: !!process.env.VITE_FIREBASE_API_KEY,\n        projectId: !!process.env.VITE_FIREBASE_PROJECT_ID,\n        appId: !!process.env.VITE_FIREBASE_APP_ID,\n        missingVars\n      });\n      \n      if (missingVars.length > 0) {\n        console.log(\"Missing environment variables:\", missingVars);\n        return res.status(400).json({\n          success: false,\n          message: \"Missing required Firebase environment variables\",\n          details: {\n            missingVariables: missingVars,\n            configuredVariables: {\n              apiKey: !!process.env.VITE_FIREBASE_API_KEY,\n              projectId: !!process.env.VITE_FIREBASE_PROJECT_ID,\n              appId: !!process.env.VITE_FIREBASE_APP_ID\n            }\n          }\n        });\n      }\n\n      console.log(\"Importing firebase-config...\");\n      const { testFirebaseConnection } = await import(\"./firebase-config\");\n      console.log(\"Running Firebase connection test...\");\n      const result = await testFirebaseConnection();\n      \n      // Log the test result for debugging\n      console.log(\"Firebase connection test result:\", result);\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in test-connection endpoint:\", error);\n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : \"Firebase connection test failed\",\n        details: {\n          error: error instanceof Error ? error.message : \"Unknown error\",\n          timestamp: new Date().toISOString(),\n          stack: error instanceof Error ? error.stack : undefined\n        }\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13991},"server/storage.ts":{"content":"import { \n  type Client, \n  type InsertClient, \n  type Service, \n  type InsertService,\n  type PaymentCode,\n  type InsertPaymentCode,\n  type SearchHistory,\n  type InsertSearchHistory,\n  type ClientWithCodes,\n  type DashboardStats\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Client operations\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByName(name: string): Promise<Client | undefined>;\n  getClientWithCodes(id: string): Promise<ClientWithCodes | undefined>;\n  getAllClients(): Promise<ClientWithCodes[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n  searchClients(query: string): Promise<ClientWithCodes[]>;\n\n  // Service operations\n  getAllServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n\n  // Payment code operations\n  getPaymentCodesByClient(clientId: string): Promise<(PaymentCode & { service: Service })[]>;\n  createPaymentCode(paymentCode: InsertPaymentCode): Promise<PaymentCode>;\n  updatePaymentCode(id: string, paymentCode: Partial<InsertPaymentCode>): Promise<PaymentCode | undefined>;\n  deletePaymentCode(id: string): Promise<boolean>;\n  validateUniqueCode(serviceId: string, code: string, excludeId?: string): Promise<boolean>;\n\n  // Search history\n  addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory>;\n  getSearchHistory(limit?: number): Promise<SearchHistory[]>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<DashboardStats>;\n}\n\nexport class MemStorage implements IStorage {\n  private clients: Map<string, Client>;\n  private services: Map<string, Service>;\n  private paymentCodes: Map<string, PaymentCode>;\n  private searchHistory: SearchHistory[];\n\n  constructor() {\n    this.clients = new Map();\n    this.services = new Map();\n    this.paymentCodes = new Map();\n    this.searchHistory = [];\n\n    // Initialize default services\n    this.initializeDefaultServices();\n  }\n\n  private initializeDefaultServices() {\n    const defaultServices = [\n      { name: \"Inwi\", color: \"#8E24AA\", icon: \"smartphone\" },\n      { name: \"Orange\", color: \"#FF5722\", icon: \"smartphone\" },\n      { name: \"Maroc Telecom\", color: \"#2196F3\", icon: \"smartphone\" },\n      { name: \"Water\", color: \"#00BCD4\", icon: \"droplet\" },\n      { name: \"Gas\", color: \"#FFC107\", icon: \"flame\" },\n      { name: \"Electricity\", color: \"#4CAF50\", icon: \"zap\" },\n      { name: \"Internet\", color: \"#9C27B0\", icon: \"wifi\" },\n      { name: \"TV\", color: \"#607D8B\", icon: \"tv\" },\n    ];\n\n    defaultServices.forEach(service => {\n      const id = randomUUID();\n      this.services.set(id, {\n        id,\n        ...service,\n        createdAt: new Date(),\n      });\n    });\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async getClientByName(name: string): Promise<Client | undefined> {\n    for (const client of Array.from(this.clients.values())) {\n      if (client.name === name) {\n        return client;\n      }\n    }\n    return undefined;\n  }\n\n  async getClientWithCodes(id: string): Promise<ClientWithCodes | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n\n    const paymentCodes = await this.getPaymentCodesByClient(id);\n    return { ...client, paymentCodes };\n  }\n\n  async getAllClients(): Promise<ClientWithCodes[]> {\n    const clients = Array.from(this.clients.values());\n    const clientsWithCodes = await Promise.all(\n      clients.map(async (client) => {\n        const paymentCodes = await this.getPaymentCodesByClient(client.id);\n        return { ...client, paymentCodes };\n      })\n    );\n    return clientsWithCodes.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    const now = new Date();\n    const client: Client = { \n      ...insertClient, \n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, updateData: Partial<InsertClient>): Promise<Client | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n\n    const updatedClient = { \n      ...client, \n      ...updateData, \n      updatedAt: new Date() \n    };\n    this.clients.set(id, updatedClient);\n    return updatedClient;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    // Delete associated payment codes\n    const codes = Array.from(this.paymentCodes.values()).filter(code => code.clientId === id);\n    codes.forEach(code => this.paymentCodes.delete(code.id));\n    \n    return this.clients.delete(id);\n  }\n\n  async searchClients(query: string): Promise<ClientWithCodes[]> {\n    const lowerQuery = query.toLowerCase();\n    const allClients = await this.getAllClients();\n    \n    return allClients.filter(client => {\n      // Search in client name\n      if (client.name.toLowerCase().includes(lowerQuery)) return true;\n      \n      // Search in phone number\n      if (client.phone.toLowerCase().includes(lowerQuery)) return true;\n      \n      // Search in payment codes\n      return client.paymentCodes.some(code => \n        code.code.toLowerCase().includes(lowerQuery) ||\n        code.service.name.toLowerCase().includes(lowerQuery)\n      );\n    });\n  }\n\n  async getAllServices(): Promise<Service[]> {\n    return Array.from(this.services.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const service: Service = { \n      ...insertService, \n      id, \n      createdAt: new Date() \n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: string, updateData: Partial<InsertService>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n\n    const updatedService = { ...service, ...updateData };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    // Delete associated payment codes\n    const codes = Array.from(this.paymentCodes.values()).filter(code => code.serviceId === id);\n    codes.forEach(code => this.paymentCodes.delete(code.id));\n    \n    return this.services.delete(id);\n  }\n\n  async getPaymentCodesByClient(clientId: string): Promise<(PaymentCode & { service: Service })[]> {\n    const codes = Array.from(this.paymentCodes.values()).filter(code => code.clientId === clientId);\n    return codes.map(code => {\n      const service = this.services.get(code.serviceId);\n      return { ...code, service: service! };\n    }).filter(code => code.service);\n  }\n\n  async createPaymentCode(insertPaymentCode: InsertPaymentCode): Promise<PaymentCode> {\n    const id = randomUUID();\n    const paymentCode: PaymentCode = { \n      ...insertPaymentCode, \n      id, \n      createdAt: new Date() \n    };\n    this.paymentCodes.set(id, paymentCode);\n    return paymentCode;\n  }\n\n  async updatePaymentCode(id: string, updateData: Partial<InsertPaymentCode>): Promise<PaymentCode | undefined> {\n    const paymentCode = this.paymentCodes.get(id);\n    if (!paymentCode) return undefined;\n\n    const updatedCode = { ...paymentCode, ...updateData };\n    this.paymentCodes.set(id, updatedCode);\n    return updatedCode;\n  }\n\n  async deletePaymentCode(id: string): Promise<boolean> {\n    return this.paymentCodes.delete(id);\n  }\n\n  async validateUniqueCode(serviceId: string, code: string, excludeId?: string): Promise<boolean> {\n    const existingCode = Array.from(this.paymentCodes.values()).find(pc => \n      pc.serviceId === serviceId && \n      pc.code === code && \n      pc.id !== excludeId\n    );\n    return !existingCode;\n  }\n\n  async addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory> {\n    const id = randomUUID();\n    const searchEntry: SearchHistory = { \n      ...search, \n      id, \n      timestamp: new Date() \n    };\n    this.searchHistory.unshift(searchEntry);\n    \n    // Keep only last 100 searches\n    if (this.searchHistory.length > 100) {\n      this.searchHistory = this.searchHistory.slice(0, 100);\n    }\n    \n    return searchEntry;\n  }\n\n  async getSearchHistory(limit = 10): Promise<SearchHistory[]> {\n    return this.searchHistory.slice(0, limit);\n  }\n\n  async getDashboardStats(): Promise<DashboardStats> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const dailySearches = this.searchHistory.filter(search => \n      search.timestamp && search.timestamp >= today\n    ).length;\n\n    return {\n      totalClients: this.clients.size,\n      totalCodes: this.paymentCodes.size,\n      activeServices: this.services.size,\n      dailySearches,\n    };\n  }\n}\n\nimport { FirebaseStorage } from \"./firebase-storage\";\n\nexport const storage = new FirebaseStorage();\n","size_bytes":9259},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, json, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  color: text(\"color\").notNull(),\n  icon: text(\"icon\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const paymentCodes = pgTable(\"payment_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  serviceId: varchar(\"service_id\").notNull(),\n  code: text(\"code\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const searchHistory = pgTable(\"search_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  query: text(\"query\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Zod schemas\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentCodeSchema = createInsertSchema(paymentCodes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSearchHistorySchema = createInsertSchema(searchHistory).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Extended schemas for frontend forms\nexport const clientFormSchema = insertClientSchema.extend({\n  paymentCodes: z.array(z.object({\n    serviceId: z.string().min(1, \"Service is required\"),\n    code: z.string().min(1, \"Payment code is required\"),\n  })),\n});\n\n// Types\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type PaymentCode = typeof paymentCodes.$inferSelect;\nexport type InsertPaymentCode = z.infer<typeof insertPaymentCodeSchema>;\n\nexport type SearchHistory = typeof searchHistory.$inferSelect;\nexport type InsertSearchHistory = z.infer<typeof insertSearchHistorySchema>;\n\nexport type ClientForm = z.infer<typeof clientFormSchema>;\n\n// Extended types for API responses\nexport type ClientWithCodes = Client & {\n  paymentCodes: (PaymentCode & { service: Service })[];\n};\n\nexport type DashboardStats = {\n  totalClients: number;\n  totalCodes: number;\n  activeServices: number;\n  dailySearches: number;\n};\n","size_bytes":2842},"api/clients/[id].js":{"content":"// Vercel serverless function for individual client operations\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, doc, getDoc, updateDoc, deleteDoc, collection, getDocs, query, where, setDoc } from 'firebase/firestore';\nimport { randomUUID } from 'crypto';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nlet app, db;\n\ntry {\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n  console.log('Firebase initialized successfully in client details API');\n} catch (error) {\n  console.error('Firebase initialization error in client details API:', error);\n  throw error;\n}\n\nexport default async function handler(req, res) {\n  console.log(`[${new Date().toISOString()}] ${req.method} /api/clients/[id] - Starting request`);\n  console.log('Request query:', req.query);\n  console.log('Request method:', req.method);\n  \n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  const { id } = req.query;\n\n  if (!id) {\n    console.log('No client ID provided');\n    return res.status(400).json({ \n      message: 'Client ID is required' \n    });\n  }\n\n  console.log('Processing request for client ID:', id);\n\n  try {\n    switch (req.method) {\n      case 'GET':\n        console.log('Getting client details for ID:', id);\n        \n        // Get client with payment codes\n        const clientDoc = await getDoc(doc(db, \"clients\", id));\n        if (!clientDoc.exists()) {\n          console.log('Client not found in Firebase:', id);\n          return res.status(404).json({ message: \"Client not found\" });\n        }\n\n        const client = { id: clientDoc.id, ...clientDoc.data() };\n        console.log('Client found:', { id: client.id, name: client.name });\n        \n        // Get payment codes for this client\n        const paymentCodesQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"clientId\", \"==\", id)\n        );\n        const paymentCodesSnapshot = await getDocs(paymentCodesQuery);\n        console.log('Found payment codes:', paymentCodesSnapshot.size);\n        \n        // Get all services\n        const servicesSnapshot = await getDocs(collection(db, \"services\"));\n        const services = servicesSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        console.log('Found services:', services.length);\n\n        // Combine payment codes with service information\n        const paymentCodes = paymentCodesSnapshot.docs.map(doc => {\n          const codeData = { id: doc.id, ...doc.data() };\n          const service = services.find(s => s.id === codeData.serviceId);\n          return {\n            ...codeData,\n            service: service || { id: \"\", name: \"Unknown Service\", color: \"#gray\", icon: \"\" }\n          };\n        });\n\n        const clientWithCodes = {\n          ...client,\n          paymentCodes\n        };\n\n        console.log('Returning client with codes:', {\n          id: clientWithCodes.id,\n          name: clientWithCodes.name,\n          paymentCodesCount: clientWithCodes.paymentCodes.length\n        });\n\n        res.status(200).json(clientWithCodes);\n        break;\n\n      case 'PUT':\n        console.log('Updating client:', id);\n        \n        // Update client\n        const { name, phone, paymentCodes = [] } = req.body;\n        \n        if (!name || !phone) {\n          return res.status(400).json({ \n            message: \"Name and phone are required\" \n          });\n        }\n\n        // Update client data\n        await updateDoc(doc(db, \"clients\", id), {\n          name,\n          phone,\n          updatedAt: new Date()\n        });\n\n        // Delete existing payment codes\n        const existingCodesQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"clientId\", \"==\", id)\n        );\n        const existingCodesSnapshot = await getDocs(existingCodesQuery);\n        \n        for (const codeDoc of existingCodesSnapshot.docs) {\n          await deleteDoc(codeDoc.ref);\n        }\n\n        // Create new payment codes\n        for (const codeData of paymentCodes) {\n          const codeId = randomUUID();\n          await setDoc(doc(db, \"paymentCodes\", codeId), {\n            id: codeId,\n            clientId: id,\n            serviceId: codeData.serviceId,\n            code: codeData.code,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n        }\n\n        console.log('Client updated successfully:', id);\n        res.status(200).json({ message: \"Client updated successfully\" });\n        break;\n\n      case 'DELETE':\n        console.log('Deleting client:', id);\n        \n        // Delete client and associated payment codes\n        const codesToDeleteQuery = query(\n          collection(db, \"paymentCodes\"),\n          where(\"clientId\", \"==\", id)\n        );\n        const codesToDeleteSnapshot = await getDocs(codesToDeleteQuery);\n        \n        for (const codeDoc of codesToDeleteSnapshot.docs) {\n          await deleteDoc(codeDoc.ref);\n        }\n\n        await deleteDoc(doc(db, \"clients\", id));\n        console.log('Client deleted successfully:', id);\n        res.status(200).json({ message: \"Client deleted successfully\" });\n        break;\n\n      default:\n        console.log('Method not allowed:', req.method);\n        res.status(405).json({ \n          message: 'Method not allowed' \n        });\n    }\n  } catch (error) {\n    console.error('Error in client details API:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request query:', req.query);\n    console.error('Request method:', req.method);\n    \n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message,\n      details: {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        clientId: id\n      }\n    });\n  }\n} ","size_bytes":6402},"api/dashboard/stats.js":{"content":"// Vercel serverless function for dashboard stats\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport default async function handler(req, res) {\n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Only allow GET requests\n  if (req.method !== 'GET') {\n    return res.status(405).json({ \n      message: 'Method not allowed' \n    });\n  }\n\n  try {\n    // Get all collections\n    const [clientsSnapshot, paymentCodesSnapshot, servicesSnapshot, searchSnapshot] = await Promise.all([\n      getDocs(collection(db, \"clients\")),\n      getDocs(collection(db, \"paymentCodes\")),\n      getDocs(collection(db, \"services\")),\n      getDocs(collection(db, \"searchHistory\"))\n    ]);\n\n    // Calculate daily searches\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const dailySearches = searchSnapshot.docs.filter(doc => {\n      const searchDate = doc.data().createdAt?.toDate();\n      return searchDate && searchDate >= today;\n    }).length;\n\n    const stats = {\n      totalClients: clientsSnapshot.size,\n      totalCodes: paymentCodesSnapshot.size,\n      activeServices: servicesSnapshot.size,\n      dailySearches\n    };\n\n    res.status(200).json(stats);\n  } catch (error) {\n    console.error('Error in dashboard stats API:', error);\n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message \n    });\n  }\n} ","size_bytes":2208},"api/payment-codes/validate.js":{"content":"// Vercel serverless function for payment code validation\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, getDocs } from 'firebase/firestore';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nlet app, db;\n\ntry {\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n  console.log('Firebase initialized successfully in payment codes validation API');\n} catch (error) {\n  console.error('Firebase initialization error in payment codes validation API:', error);\n  throw error;\n}\n\nexport default async function handler(req, res) {\n  console.log(`[${new Date().toISOString()}] ${req.method} /api/payment-codes/validate - Starting request`);\n  \n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Only allow POST requests\n  if (req.method !== 'POST') {\n    return res.status(405).json({ \n      message: 'Method not allowed' \n    });\n  }\n\n  try {\n    const { serviceId, code, excludeId } = req.body;\n    \n    if (!serviceId || !code) {\n      return res.status(400).json({ \n        message: 'Service ID and code are required' \n      });\n    }\n\n    console.log('Validating payment code:', { serviceId, code, excludeId });\n\n    // Check for duplicate code in the same service\n    const duplicateQuery = query(\n      collection(db, \"paymentCodes\"),\n      where(\"serviceId\", \"==\", serviceId),\n      where(\"code\", \"==\", code)\n    );\n    \n    const duplicateSnapshot = await getDocs(duplicateQuery);\n    \n    let isUnique = true;\n    \n    if (excludeId) {\n      // If excluding an ID (for updates), check if any other codes match\n      isUnique = duplicateSnapshot.docs.every(doc => doc.id === excludeId);\n    } else {\n      // For new codes, check if any codes match\n      isUnique = duplicateSnapshot.empty;\n    }\n\n    console.log('Payment code validation result:', { isUnique, code, serviceId });\n    \n    res.status(200).json({ isUnique });\n  } catch (error) {\n    console.error('Error in payment code validation API:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    \n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message,\n      details: {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        hasBody: !!req.body\n      }\n    });\n  }\n} ","size_bytes":2979},"api/settings/test-connection.js":{"content":"// Vercel serverless function for testing Firebase connection\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, doc, getDoc } from 'firebase/firestore';\n\nexport default async function handler(req, res) {\n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Only allow POST requests\n  if (req.method !== 'POST') {\n    return res.status(405).json({ \n      success: false, \n      message: 'Method not allowed' \n    });\n  }\n\n  try {\n    console.log(\"Starting Firebase connection test...\");\n    \n    // Validate environment variables before attempting connection\n    const requiredEnvVars = [\n      'VITE_FIREBASE_API_KEY',\n      'VITE_FIREBASE_PROJECT_ID',\n      'VITE_FIREBASE_APP_ID'\n    ];\n    \n    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n    \n    console.log(\"Environment variables check:\", {\n      apiKey: !!process.env.VITE_FIREBASE_API_KEY,\n      projectId: !!process.env.VITE_FIREBASE_PROJECT_ID,\n      appId: !!process.env.VITE_FIREBASE_APP_ID,\n      missingVars\n    });\n    \n    if (missingVars.length > 0) {\n      console.log(\"Missing environment variables:\", missingVars);\n      return res.status(400).json({\n        success: false,\n        message: \"Missing required Firebase environment variables\",\n        details: {\n          missingVariables: missingVars,\n          configuredVariables: {\n            apiKey: !!process.env.VITE_FIREBASE_API_KEY,\n            projectId: !!process.env.VITE_FIREBASE_PROJECT_ID,\n            appId: !!process.env.VITE_FIREBASE_APP_ID\n          }\n        }\n      });\n    }\n\n    // Firebase configuration\n    const firebaseConfig = {\n      apiKey: process.env.VITE_FIREBASE_API_KEY,\n      authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n      projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n      storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n      messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n      appId: process.env.VITE_FIREBASE_APP_ID,\n    };\n\n    console.log(\"Initializing Firebase...\");\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app);\n\n    console.log(\"Testing Firestore connection...\");\n    // Test Firestore connection by attempting to read from a test collection\n    const testDocRef = doc(db, \"test\", \"connection\");\n    const docSnapshot = await getDoc(testDocRef);\n    \n    console.log(\"Firebase connection test completed successfully\");\n    \n    const result = {\n      success: true,\n      message: \"Firebase connection successful\",\n      details: {\n        documentExists: docSnapshot.exists(),\n        projectId: process.env.VITE_FIREBASE_PROJECT_ID\n      }\n    };\n    \n    console.log(\"Firebase connection test result:\", result);\n    res.status(200).json(result);\n    \n  } catch (error) {\n    console.error(\"Error in test-connection endpoint:\", error);\n    res.status(500).json({ \n      success: false, \n      message: error instanceof Error ? error.message : \"Firebase connection test failed\",\n      details: {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n        stack: error instanceof Error ? error.stack : undefined\n      }\n    });\n  }\n} ","size_bytes":3517},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ErrorBoundary } from \"@/components/error-boundary\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport ClientDetails from \"@/pages/client-details\";\nimport Services from \"@/pages/services\";\nimport Export from \"@/pages/export\";\nimport Settings from \"@/pages/settings\";\nimport Sidebar from \"@/components/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/clients\" component={Clients} />\n          <Route path=\"/clients/:id\" component={ClientDetails} />\n          <Route path=\"/services\" component={Services} />\n          <Route path=\"/export\" component={Export} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"customer-manager-theme\">\n        <QueryClientProvider client={queryClient}>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </QueryClientProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":1724},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Cairo', 'Noto Sans Arabic', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Source Code Pro', 'Courier New', monospace;\n  --font-arabic: 'Cairo', 'Noto Sans Arabic', sans-serif;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Service colors */\n  --inwi: hsl(270 46% 42%);\n  --orange: hsl(14 100% 55%);\n  --telecom: hsl(207 90% 54%);\n  --water: hsl(188 100% 38%);\n  --gas: hsl(45 100% 51%);\n  --electricity: hsl(122 39% 49%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Open Sans', sans-serif;\n  }\n}\n\n@media print {\n  .no-print { display: none !important; }\n  .print-only { display: block !important; }\n  \n  .thermal-print {\n    width: 80mm !important;\n    font-size: 12px !important;\n    line-height: 1.2 !important;\n  }\n  \n  .a4-print {\n    width: 210mm !important;\n    min-height: 297mm !important;\n    padding: 20mm !important;\n  }\n}\n\n.print-only { display: none; }\n\n.service-badge {\n  transition: all 0.2s ease;\n}\n\n.service-badge:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n.client-card {\n  transition: all 0.2s ease;\n}\n\n.client-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n}\n\n.search-highlight {\n  background-color: #FFF3CD;\n  padding: 1px 3px;\n  border-radius: 3px;\n}\n","size_bytes":6612},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Global error handlers\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason);\n  event.preventDefault();\n});\n\nwindow.addEventListener('error', (event) => {\n  console.error('Global error:', event.error);\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":433},"api/clients/search/[query].js":{"content":"// Vercel serverless function for client search\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, setDoc, doc } from 'firebase/firestore';\nimport { randomUUID } from 'crypto';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: process.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport default async function handler(req, res) {\n  // Enable CORS\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Only allow GET requests\n  if (req.method !== 'GET') {\n    return res.status(405).json({ \n      message: 'Method not allowed' \n    });\n  }\n\n  const { query: searchQuery } = req.query;\n\n  if (!searchQuery) {\n    return res.status(400).json({ \n      message: 'Search query is required' \n    });\n  }\n\n  try {\n    // Add to search history\n    const searchId = randomUUID();\n    await setDoc(doc(db, \"searchHistory\", searchId), {\n      id: searchId,\n      query: searchQuery,\n      timestamp: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n\n    // Get all clients with their payment codes\n    const [clientsSnapshot, paymentCodesSnapshot, servicesSnapshot] = await Promise.all([\n      getDocs(collection(db, \"clients\")),\n      getDocs(collection(db, \"paymentCodes\")),\n      getDocs(collection(db, \"services\"))\n    ]);\n\n    const clients = clientsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    const paymentCodes = paymentCodesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    const services = servicesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    // Combine clients with their payment codes and services\n    const clientsWithCodes = clients.map(client => ({\n      ...client,\n      paymentCodes: paymentCodes\n        .filter(code => code.clientId === client.id)\n        .map(code => {\n          const service = services.find(s => s.id === code.serviceId);\n          return {\n            ...code,\n            service: service || { id: \"\", name: \"Unknown Service\", color: \"#gray\", icon: \"\" }\n          };\n        })\n    }));\n\n    // Perform search\n    const searchTerm = decodeURIComponent(searchQuery).toLowerCase();\n    const results = clientsWithCodes.filter(client => \n      client.name.toLowerCase().includes(searchTerm) || \n      client.phone.includes(searchTerm) || \n      client.paymentCodes?.some(code => code.code.toLowerCase().includes(searchTerm))\n    );\n\n    res.status(200).json(results);\n  } catch (error) {\n    console.error('Error in client search API:', error);\n    res.status(500).json({ \n      message: 'Internal server error',\n      error: error.message \n    });\n  }\n} ","size_bytes":3317},"client/src/components/client-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, Plus, Copy, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type ClientWithCodes, type Service, type ClientForm } from \"@shared/schema\";\n\ninterface ClientModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  client?: ClientWithCodes;\n}\n\ninterface PaymentCodeForm {\n  serviceId: string;\n  code: string;\n}\n\nexport default function ClientModal({ isOpen, onClose, client }: ClientModalProps) {\n  const { toast } = useToast();\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [paymentCodes, setPaymentCodes] = useState<PaymentCodeForm[]>([]);\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isOpen,\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: ClientForm) => {\n      const response = await apiRequest(\"POST\", \"/api/clients\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ title: \"Client created successfully\" });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error creating client\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateClientMutation = useMutation({\n    mutationFn: async (data: ClientForm) => {\n      const response = await apiRequest(\"PUT\", `/api/clients`, { id: client!.id, ...data });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ title: \"Client updated successfully\" });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error updating client\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  useEffect(() => {\n    if (client) {\n      setName(client.name);\n      setPhone(client.phone);\n      setPaymentCodes(client.paymentCodes.map(pc => ({\n        serviceId: pc.serviceId,\n        code: pc.code,\n      })));\n    } else {\n      setName(\"\");\n      setPhone(\"\");\n      setPaymentCodes([]);\n    }\n  }, [client, isOpen]);\n\n  const addPaymentCode = () => {\n    setPaymentCodes([...paymentCodes, { serviceId: \"\", code: \"\" }]);\n  };\n\n  const removePaymentCode = (index: number) => {\n    setPaymentCodes(paymentCodes.filter((_, i) => i !== index));\n  };\n\n  const updatePaymentCode = (index: number, field: keyof PaymentCodeForm, value: string) => {\n    const updated = [...paymentCodes];\n    updated[index] = { ...updated[index], [field]: value };\n    setPaymentCodes(updated);\n  };\n\n  const copyCode = async (code: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({ title: \"Payment code copied to clipboard\" });\n    } catch (error) {\n      toast({ \n        title: \"Failed to copy code\", \n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name.trim() || !phone.trim()) {\n      toast({ \n        title: \"Please fill in all required fields\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    const formData: ClientForm = {\n      name: name.trim(),\n      phone: phone.trim(),\n      paymentCodes: paymentCodes.filter(pc => pc.serviceId && pc.code.trim()),\n    };\n\n    if (client) {\n      updateClientMutation.mutate(formData);\n    } else {\n      createClientMutation.mutate(formData);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              {client ? \"Edit Client\" : \"Add New Client\"}\n            </h2>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-6 h-6\" />\n            </Button>\n          </div>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Client Name *</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Enter client name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phone\">Phone Number *</Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                placeholder=\"+212 6XX XXX XXX\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n          \n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Payment Codes</h3>\n              <Button type=\"button\" variant=\"outline\" onClick={addPaymentCode}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Code\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {paymentCodes.map((code, index) => (\n                <div key={index} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <Label>Service</Label>\n                    <Select \n                      value={code.serviceId} \n                      onValueChange={(value) => updatePaymentCode(index, \"serviceId\", value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select service\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {(services as Service[])?.map((service: Service) => (\n                          <SelectItem key={service.id} value={service.id}>\n                            {service.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <Label>Payment Code</Label>\n                    <Input\n                      placeholder=\"Enter payment code\"\n                      value={code.code}\n                      onChange={(e) => updatePaymentCode(index, \"code\", e.target.value)}\n                    />\n                  </div>\n                  \n                  <div className=\"flex space-x-2 pt-6\">\n                    {code.code && (\n                      <Button \n                        type=\"button\" \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => copyCode(code.code)}\n                        title=\"Copy\"\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                    <Button \n                      type=\"button\" \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => removePaymentCode(index)}\n                      title=\"Delete\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createClientMutation.isPending || updateClientMutation.isPending}\n            >\n              {(createClientMutation.isPending || updateClientMutation.isPending) ? \"Saving...\" : \"Save Client\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8833},"client/src/components/error-boundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Error boundary caught an error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Something went wrong</h1>\n            <p className=\"text-gray-600 mb-6\">\n              {this.state.error?.message || \"An unexpected error occurred\"}\n            </p>\n            <button\n              className=\"px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90\"\n              onClick={() => {\n                this.setState({ hasError: false, error: undefined });\n                window.location.reload();\n              }}\n            >\n              Reload Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":1368},"client/src/components/export-modal.tsx":{"content":"import { useState } from \"react\";\nimport { X, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ExportModal({ isOpen, onClose }: ExportModalProps) {\n  const { toast } = useToast();\n  const [format, setFormat] = useState(\"csv\");\n  const [fields, setFields] = useState({\n    names: true,\n    phones: true,\n    codes: true,\n    services: true,\n  });\n\n  const handleExport = async () => {\n    try {\n      if (format === \"csv\") {\n        const response = await fetch(\"/api/export/csv\");\n        if (!response.ok) throw new Error(\"Export failed\");\n        \n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"clients-export.csv\";\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        toast({ title: \"CSV export completed successfully\" });\n      } else {\n        // PDF export would be implemented here\n        toast({ \n          title: \"PDF export not yet implemented\", \n          variant: \"destructive\" \n        });\n      }\n      \n      onClose();\n    } catch (error) {\n      toast({ \n        title: \"Export failed\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Export Data</h2>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-6 h-6\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n              Export Format\n            </Label>\n            <RadioGroup value={format} onValueChange={setFormat}>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"csv\" id=\"csv\" />\n                <Label htmlFor=\"csv\">CSV (Excel Compatible)</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"pdf\" id=\"pdf\" />\n                <Label htmlFor=\"pdf\">PDF Report</Label>\n              </div>\n            </RadioGroup>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n              Include Fields\n            </Label>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"names\" \n                  checked={fields.names}\n                  onCheckedChange={(checked) => \n                    setFields({ ...fields, names: checked as boolean })\n                  }\n                />\n                <Label htmlFor=\"names\">Client Names</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"phones\" \n                  checked={fields.phones}\n                  onCheckedChange={(checked) => \n                    setFields({ ...fields, phones: checked as boolean })\n                  }\n                />\n                <Label htmlFor=\"phones\">Phone Numbers</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"codes\" \n                  checked={fields.codes}\n                  onCheckedChange={(checked) => \n                    setFields({ ...fields, codes: checked as boolean })\n                  }\n                />\n                <Label htmlFor=\"codes\">Payment Codes</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"services\" \n                  checked={fields.services}\n                  onCheckedChange={(checked) => \n                    setFields({ ...fields, services: checked as boolean })\n                  }\n                />\n                <Label htmlFor=\"services\">Service Types</Label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button onClick={handleExport}>\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5223},"client/src/components/print-templates.tsx":{"content":"import { forwardRef } from \"react\";\nimport { type ClientWithCodes } from \"@shared/schema\";\n\ninterface PrintTemplateProps {\n  client: ClientWithCodes;\n  format: \"thermal\" | \"a4\";\n}\n\nexport const PrintTemplate = forwardRef<HTMLDivElement, PrintTemplateProps>(\n  ({ client, format }, ref) => {\n    if (format === \"thermal\") {\n      return (\n        <div ref={ref} className=\"print-only thermal-print\">\n          <div className=\"text-center mb-4\">\n            <h1 className=\"text-lg font-bold\">CLIENT INFO</h1>\n            <p className=\"text-xs\">Payment Codes Receipt</p>\n            <hr className=\"my-2\" />\n          </div>\n          \n          <div className=\"mb-4\">\n            <p className=\"font-semibold\">{client.name}</p>\n            <p className=\"text-sm\">{client.phone}</p>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h2 className=\"font-semibold mb-2\">PAYMENT CODES:</h2>\n            {client.paymentCodes.map((code) => (\n              <div key={code.id} className=\"flex justify-between mb-1 text-sm\">\n                <span>{code.service.name}:</span>\n                <span className=\"font-mono\">{code.code}</span>\n              </div>\n            ))}\n          </div>\n          \n          <hr className=\"my-2\" />\n          <div className=\"text-center text-xs\">\n            <p>Printed: {new Date().toLocaleDateString()}</p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div ref={ref} className=\"print-only a4-print\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Client Information</h1>\n          <p className=\"text-gray-600\">Payment Codes & Contact Details</p>\n        </div>\n        \n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 border-b border-gray-300 pb-2\">\n            Client Details\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"font-semibold\">Name:</p>\n              <p className=\"text-lg\">{client.name}</p>\n            </div>\n            <div>\n              <p className=\"font-semibold\">Phone:</p>\n              <p className=\"text-lg\">{client.phone}</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 border-b border-gray-300 pb-2\">\n            Payment Codes\n          </h2>\n          <div className=\"space-y-4\">\n            {client.paymentCodes.map((code) => (\n              <div \n                key={code.id} \n                className=\"flex items-center justify-between p-4 border border-gray-200 rounded\"\n              >\n                <div className=\"flex items-center\">\n                  <div \n                    className=\"w-4 h-4 rounded-full mr-3\" \n                    style={{ backgroundColor: code.service.color }}\n                  />\n                  <span className=\"font-medium\">{code.service.name}</span>\n                </div>\n                <span className=\"font-mono text-lg\">{code.code}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"text-center text-sm text-gray-600\">\n          <p>Generated on {new Date().toLocaleDateString()}</p>\n        </div>\n      </div>\n    );\n  }\n);\n\nPrintTemplate.displayName = \"PrintTemplate\";\n","size_bytes":3321},"client/src/components/search-bar.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Search, Command } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type ClientWithCodes } from \"@shared/schema\";\n\ninterface SearchBarProps {\n  onResults: (results: ClientWithCodes[]) => void;\n  onClear: () => void;\n}\n\nexport default function SearchBar({ onResults, onClear }: SearchBarProps) {\n  const [query, setQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const onResultsRef = useRef(onResults);\n  const onClearRef = useRef(onClear);\n\n  // Update refs when props change\n  useEffect(() => {\n    onResultsRef.current = onResults;\n    onClearRef.current = onClear;\n  });\n\n  // Debounce the query to avoid excessive API calls\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(query);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/clients/search\", debouncedQuery],\n    enabled: debouncedQuery.length > 2,\n    queryFn: async () => {\n      const response = await fetch(`/api/clients/search/${encodeURIComponent(debouncedQuery)}`);\n      if (!response.ok) throw new Error(\"Search failed\");\n      return response.json() as Promise<ClientWithCodes[]>;\n    },\n  });\n\n  // Handle search results and clear\n  useEffect(() => {\n    if (debouncedQuery.length === 0) {\n      onClearRef.current();\n    } else if (searchResults && debouncedQuery.length > 2) {\n      onResultsRef.current(searchResults);\n    }\n  }, [searchResults, debouncedQuery]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        document.getElementById('search-input')?.focus();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  return (\n    <div className=\"relative flex-1 max-w-2xl\">\n      <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n        <Search className=\"w-5 h-5 text-gray-400\" />\n      </div>\n      <input\n        id=\"search-input\"\n        type=\"text\"\n        placeholder=\"Search by name, phone, or payment code...\"\n        className=\"block w-full pl-10 pr-16 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <div className=\"absolute right-2 top-2\">\n        <kbd className=\"px-2 py-1 text-xs font-semibold text-gray-500 bg-gray-100 border border-gray-300 rounded flex items-center gap-1\">\n          <Command className=\"w-3 h-3\" />\n          K\n        </kbd>\n      </div>\n    </div>\n  );\n}","size_bytes":2816},"client/src/components/service-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { X, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Service } from \"@shared/schema\";\n\ninterface ServiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  service?: Service;\n}\n\ninterface ServiceForm {\n  name: string;\n  color: string;\n  icon: string;\n}\n\nconst serviceIcons = [\n  { value: \"credit-card\", label: \"Credit Card\" },\n  { value: \"smartphone\", label: \"Smartphone\" },\n  { value: \"wifi\", label: \"WiFi\" },\n  { value: \"tv\", label: \"TV\" },\n  { value: \"car\", label: \"Car\" },\n  { value: \"home\", label: \"Home\" },\n  { value: \"shopping-cart\", label: \"Shopping\" },\n  { value: \"gift\", label: \"Gift\" },\n  { value: \"heart\", label: \"Health\" },\n  { value: \"book\", label: \"Education\" },\n];\n\nconst serviceColors = [\n  \"#3B82F6\", // Blue\n  \"#10B981\", // Green\n  \"#F59E0B\", // Yellow\n  \"#EF4444\", // Red\n  \"#8B5CF6\", // Purple\n  \"#F97316\", // Orange\n  \"#06B6D4\", // Cyan\n  \"#84CC16\", // Lime\n  \"#EC4899\", // Pink\n  \"#6B7280\", // Gray\n];\n\nexport default function ServiceModal({ isOpen, onClose, service }: ServiceModalProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<ServiceForm>({\n    name: \"\",\n    color: \"#3B82F6\",\n    icon: \"credit-card\"\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ServiceForm) => {\n      const response = await apiRequest(\"POST\", \"/api/services\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service created successfully\" });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error creating service\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: ServiceForm) => {\n      const response = await apiRequest(\"PUT\", `/api/services/${service!.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service updated successfully\" });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error updating service\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  useEffect(() => {\n    if (service) {\n      setFormData({\n        name: service.name,\n        color: service.color,\n        icon: service.icon\n      });\n    } else {\n      setFormData({\n        name: \"\",\n        color: \"#3B82F6\",\n        icon: \"credit-card\"\n      });\n    }\n  }, [service, isOpen]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({ \n        title: \"Please enter a service name\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    if (service) {\n      updateMutation.mutate(formData);\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              {service ? \"Edit Service\" : \"Add New Service\"}\n            </h2>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-6 h-6\" />\n            </Button>\n          </div>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div>\n            <Label htmlFor=\"name\">Service Name *</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Enter service name\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              required\n            />\n          </div>\n          \n          <div>\n            <Label>Service Icon</Label>\n            <div className=\"grid grid-cols-5 gap-2 mt-2\">\n              {serviceIcons.map((icon) => (\n                <button\n                  key={icon.value}\n                  type=\"button\"\n                  className={`p-3 rounded-lg border-2 transition-colors ${\n                    formData.icon === icon.value\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => setFormData(prev => ({ ...prev, icon: icon.value }))}\n                  title={icon.label}\n                >\n                  <div className=\"w-6 h-6 flex items-center justify-center text-lg\">\n                    {icon.value === 'credit-card' && '💳'}\n                    {icon.value === 'smartphone' && '📱'}\n                    {icon.value === 'wifi' && '📶'}\n                    {icon.value === 'tv' && '📺'}\n                    {icon.value === 'car' && '🚗'}\n                    {icon.value === 'home' && '🏠'}\n                    {icon.value === 'shopping-cart' && '🛒'}\n                    {icon.value === 'gift' && '🎁'}\n                    {icon.value === 'heart' && '❤️'}\n                    {icon.value === 'book' && '📚'}\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <Label>Service Color</Label>\n            <div className=\"grid grid-cols-5 gap-2 mt-2\">\n              {serviceColors.map((color) => (\n                <button\n                  key={color}\n                  type=\"button\"\n                  className={`w-10 h-10 rounded-full border-2 transition-transform ${\n                    formData.color === color\n                      ? 'border-gray-800 scale-110'\n                      : 'border-gray-200 hover:scale-105'\n                  }`}\n                  style={{ backgroundColor: color }}\n                  onClick={() => setFormData(prev => ({ ...prev, color }))}\n                />\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"flex-1\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {service ? \"Update\" : \"Create\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n} ","size_bytes":7097},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Users, \n  Grid3x3, \n  Download, \n  Settings,\n  Wifi\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Clients\", href: \"/clients\", icon: Users },\n  { name: \"Services\", href: \"/services\", icon: Grid3x3 },\n  { name: \"Export Data\", href: \"/export\", icon: Download },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-gray-200\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <h1 className=\"text-xl font-bold text-gray-900\">Customer Manager</h1>\n        <p className=\"text-sm text-gray-500 mt-1\">Client & Payment System</p>\n      </div>\n      \n      <nav className=\"p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <li key={item.name}>\n                <Link \n                  href={item.href} \n                  className={cn(\n                    \"flex items-center px-4 py-3 rounded-lg font-medium transition-colors cursor-pointer\",\n                    isActive \n                      ? \"text-primary bg-blue-50\" \n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )}\n                >\n                  <Icon className=\"w-5 h-5 mr-3\" />\n                  {item.name}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n\n    </aside>\n  );\n}\n","size_bytes":1711},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1604},"client/src/components/thermal-print.ts":{"content":"import type { ClientWithCodes } from \"@shared/schema\";\n\ninterface PrintSettings {\n  companyName?: string;\n  companyAddress?: string;\n  companyPhone?: string;\n}\n\nexport function createThermalPrint(client: ClientWithCodes, settings?: PrintSettings) {\n  const now = new Date();\n  const dateStr = now.toLocaleDateString('fr-FR');\n  const timeStr = now.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });\n  \n  return `\n    <div style=\"\n      font-family: 'Source Code Pro', 'Courier New', monospace;\n      font-size: 12px;\n      line-height: 1.3;\n      width: 72mm;\n      max-width: 72mm;\n      margin: 0 auto;\n      padding: 2mm;\n      color: #000;\n      background: #fff;\n    \">\n      <!-- Header -->\n      <div style=\"text-align: center; margin-bottom: 4mm; border-bottom: 1px dashed #000; padding-bottom: 2mm;\">\n        <div style=\"font-size: 16px; font-weight: bold; margin-bottom: 2mm;\">\n          RECU DE PAIEMENT\n        </div>\n        <div style=\"font-size: 10px;\">\n          ${dateStr} - ${timeStr}\n        </div>\n      </div>\n\n      <!-- Client Info -->\n      <div style=\"margin-bottom: 4mm; padding: 2mm; background: #f9f9f9; border-radius: 2mm;\">\n        <div style=\"font-size: 12px; font-weight: bold; margin-bottom: 2mm; text-align: center;\">\n          ${client.name.toUpperCase()}\n        </div>\n        <div style=\"font-size: 11px; text-align: center;\">\n          Tel: ${client.phone}\n        </div>\n      </div>\n\n      <!-- Payment Codes -->\n      <div style=\"margin-bottom: 4mm;\">\n        <div style=\"font-size: 12px; font-weight: bold; margin-bottom: 3mm; text-align: center; border-bottom: 2px solid #000; padding-bottom: 1mm;\">\n          CODES DE PAIEMENT\n        </div>\n        ${client.paymentCodes.length > 0 ? client.paymentCodes.map((code, index) => `\n          <div style=\"\n            margin-bottom: 3mm; \n            padding: 2mm;\n            border: 1px solid #ddd;\n            border-radius: 2mm;\n            background: ${index % 2 === 0 ? '#f5f5f5' : '#fff'};\n          \">\n            <div style=\"font-size: 11px; font-weight: bold; margin-bottom: 1mm; text-align: center;\">\n              ${code.service.name}\n            </div>\n            <div style=\"\n              font-family: 'Source Code Pro', monospace; \n              font-size: 14px; \n              font-weight: bold;\n              letter-spacing: 1px;\n              text-align: center;\n              padding: 1mm;\n              border: 1px dashed #666;\n              background: white;\n            \">\n              ${code.code}\n            </div>\n          </div>\n        `).join('') : '<div style=\"font-size: 11px; text-align: center; color: #666; padding: 4mm;\">Aucun code de paiement</div>'}\n      </div>\n\n      <!-- Summary -->\n      <div style=\"border-top: 1px dashed #000; padding-top: 2mm; margin-top: 4mm;\">\n        <div style=\"display: flex; justify-content: space-between; font-size: 10px; margin-bottom: 1mm;\">\n          <span>Total codes:</span>\n          <span style=\"font-weight: bold;\">${client.paymentCodes.length}</span>\n        </div>\n      </div>\n\n      <!-- Footer -->\n      <div style=\"\n        text-align: center; \n        margin-top: 4mm; \n        padding-top: 2mm; \n        border-top: 2px dashed #000;\n        font-size: 10px;\n      \">\n        <div style=\"margin-bottom: 2mm; font-weight: bold;\">\n          Merci pour votre confiance\n        </div>\n        <div style=\"font-size: 8px; color: #666;\">\n          ================================\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function printThermalReceipt(client: ClientWithCodes, settings?: PrintSettings) {\n  const printContent = createThermalPrint(client, settings);\n  \n  const printWindow = window.open('', '_blank', 'width=300,height=600');\n  if (printWindow) {\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"UTF-8\">\n          <title>Recu - ${client.name}</title>\n          <link href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap\" rel=\"stylesheet\">\n          <style>\n            @page {\n              size: 80mm auto;\n              margin: 0;\n              padding: 0;\n            }\n            \n            @media print {\n              body { \n                margin: 0; \n                padding: 0; \n                font-size: 12px;\n                -webkit-print-color-adjust: exact;\n                color-adjust: exact;\n              }\n              \n              * {\n                box-sizing: border-box;\n              }\n            }\n            \n            body {\n              font-family: 'Source Code Pro', 'Courier New', monospace;\n              margin: 0;\n              padding: 0;\n              background: white;\n              width: 80mm;\n            }\n          </style>\n        </head>\n        <body>\n          ${printContent}\n          <script>\n            window.onload = function() {\n              window.print();\n              window.onafterprint = function() {\n                window.close();\n              };\n            };\n          </script>\n        </body>\n      </html>\n    `);\n    printWindow.document.close();\n  }\n}","size_bytes":5157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Test Firebase connection\nexport const testFirebaseConnection = async (): Promise<{ success: boolean; message: string }> => {\n  try {\n    // Test Firestore connection by attempting to read from a test collection\n    const testDocRef = doc(db, \"test\", \"connection\");\n    await getDoc(testDocRef);\n    \n    return {\n      success: true,\n      message: \"Firebase connection successful\"\n    };\n  } catch (error) {\n    console.error(\"Firebase connection test failed:\", error);\n    return {\n      success: false,\n      message: error instanceof Error ? error.message : \"Unknown Firebase connection error\"\n    };\n  }\n};\n\nexport { app, auth, db };\n","size_bytes":1308},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const text = (await res.text()) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(`${res.status}:`)) {\n        throw error;\n      }\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1593},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/client-details.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ArrowLeft, Edit, Trash2, Plus, Phone, User, CreditCard, Calendar, Printer, Copy, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPaymentCodeSchema, type InsertPaymentCode, type ClientWithCodes, type Service } from \"@shared/schema\";\nimport { printThermalReceipt } from \"@/components/thermal-print\";\n\nexport default function ClientDetails() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isAddCodeDialogOpen, setIsAddCodeDialogOpen] = useState(false);\n  const [copiedCodeId, setCopiedCodeId] = useState<string | null>(null);\n\n  // Helper function to convert Firestore timestamps\n  const convertTimestamps = (data: any): any => {\n    if (data === null || data === undefined) {\n      return data;\n    }\n    \n    if (typeof data === 'object' && data.constructor === Object) {\n      // Check if this is a Firestore timestamp\n      if (data.type === 'firestore/timestamp/1.0' && typeof data.seconds === 'number') {\n        return new Date(data.seconds * 1000 + (data.nanoseconds || 0) / 1000000);\n      }\n      \n      // Recursively convert object properties\n      const converted: any = {};\n      for (const [key, value] of Object.entries(data)) {\n        converted[key] = convertTimestamps(value);\n      }\n      return converted;\n    }\n    \n    if (Array.isArray(data)) {\n      return data.map(convertTimestamps);\n    }\n    \n    return data;\n  };\n\n  // Fetch client data\n  const { data: client, isLoading } = useQuery<ClientWithCodes>({\n    queryKey: [\"/api/clients\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/clients/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch client');\n      }\n      const data = await response.json();\n      return convertTimestamps(data);\n    },\n  });\n\n  // Fetch services for payment code creation\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  // Delete client mutation\n  const deleteClientMutation = useMutation({\n    mutationFn: () =>\n      fetch(`/api/clients/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Client deleted\",\n        description: \"Client has been successfully deleted\",\n      });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add payment code form\n  const form = useForm<InsertPaymentCode>({\n    resolver: zodResolver(insertPaymentCodeSchema),\n    defaultValues: {\n      clientId: id || \"\",\n      serviceId: \"\",\n      code: \"\",\n    },\n  });\n\n  // Add payment code mutation\n  const addPaymentCodeMutation = useMutation({\n    mutationFn: (data: InsertPaymentCode) =>\n      fetch(\"/api/payment-codes\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\", id] });\n      setIsAddCodeDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Payment code added\",\n        description: \"Payment code has been successfully added\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add payment code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete payment code mutation\n  const deletePaymentCodeMutation = useMutation({\n    mutationFn: (codeId: string) =>\n      fetch(`/api/payment-codes/${codeId}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\", id] });\n      toast({\n        title: \"Payment code deleted\",\n        description: \"Payment code has been successfully deleted\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete payment code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPaymentCode) => {\n    addPaymentCodeMutation.mutate(data);\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this client? This action cannot be undone.\")) {\n      deleteClientMutation.mutate();\n    }\n  };\n\n  const handlePrint = async () => {\n    if (!client) return;\n    \n    try {\n      // Get settings for print header\n      const settingsResponse = await fetch('/api/settings');\n      const settings = settingsResponse.ok ? await settingsResponse.json() : {};\n      \n      printThermalReceipt(client, {\n        companyName: settings.companyName || 'INEX CASH',\n        companyAddress: settings.companyAddress || '',\n        companyPhone: settings.companyPhone || ''\n      });\n      \n      toast({ title: \"Thermal receipt opened for printing\" });\n    } catch (error) {\n      console.error('Print error:', error);\n      toast({ \n        title: \"Print error\", \n        description: \"Could not open print dialog\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const handleCopyCode = async (code: string, codeId: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopiedCodeId(codeId);\n      toast({ title: \"Payment code copied!\" });\n      \n      // Reset the copied state after 2 seconds\n      setTimeout(() => {\n        setCopiedCodeId(null);\n      }, 2000);\n    } catch (error) {\n      toast({ \n        title: \"Copy failed\", \n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/\")}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!client) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/\")}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">Client not found</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">The client you're looking for doesn't exist.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 bg-white dark:bg-gray-900 min-h-screen\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/\")} className=\"dark:text-gray-100\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{client.name}</h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">Client Details</p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handlePrint} className=\"dark:border-gray-600 dark:text-gray-100\">\n            <Printer className=\"w-4 h-4 mr-2\" />\n            Print\n          </Button>\n          <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(true)} className=\"dark:border-gray-600 dark:text-gray-100\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Edit\n          </Button>\n          <Button variant=\"destructive\" onClick={handleDelete}>\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Client Information */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                <User className=\"w-5 h-5\" />\n                Client Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <User className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Name</p>\n                  <p className=\"font-medium dark:text-gray-100\">{client.name}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Phone</p>\n                  <p className=\"font-medium dark:text-gray-100\">{client.phone}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Calendar className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Created</p>\n                  <p className=\"font-medium dark:text-gray-100\">\n                    {client.createdAt ? new Date(client.createdAt).toLocaleDateString() : 'N/A'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payment Codes */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  Payment Codes ({client.paymentCodes?.length || 0})\n                </CardTitle>\n                <Dialog open={isAddCodeDialogOpen} onOpenChange={setIsAddCodeDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button size=\"sm\" className=\"dark:bg-blue-600 dark:hover:bg-blue-700\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Code\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"dark:bg-gray-800 dark:border-gray-700\">\n                    <DialogHeader>\n                      <DialogTitle className=\"dark:text-gray-100\">Add Payment Code</DialogTitle>\n                      <DialogDescription className=\"dark:text-gray-400\">\n                        Add a new payment code for this client\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"serviceId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"dark:text-gray-100\">Service</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\">\n                                    <SelectValue placeholder=\"Select a service\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {services.map((service) => (\n                                    <SelectItem key={service.id} value={service.id}>\n                                      {service.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"code\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"dark:text-gray-100\">Payment Code</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Enter payment code\" \n                                  {...field} \n                                  className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button \n                            type=\"submit\" \n                            disabled={addPaymentCodeMutation.isPending}\n                            className=\"dark:bg-blue-600 dark:hover:bg-blue-700\"\n                          >\n                            {addPaymentCodeMutation.isPending ? \"Adding...\" : \"Add Code\"}\n                          </Button>\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsAddCodeDialogOpen(false)}\n                            className=\"dark:border-gray-600 dark:text-gray-100\"\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {client?.paymentCodes && client.paymentCodes.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {client.paymentCodes.map((code) => (\n                    <div key={code.id} className=\"flex items-center justify-between p-4 border rounded-lg dark:border-gray-600 bg-gray-50 dark:bg-gray-700\">\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: code.service?.color || '#6B7280' }}\n                        />\n                        <div>\n                          <p className=\"font-semibold dark:text-gray-100\">{code.service?.name || 'Unknown Service'}</p>\n                          <p className=\"text-lg font-mono font-bold text-gray-900 dark:text-gray-100\">{code.code}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleCopyCode(code.code, code.id)}\n                          className=\"dark:border-gray-600 dark:text-gray-100\"\n                          title=\"Copy payment code\"\n                        >\n                          {copiedCodeId === code.id ? (\n                            <Check className=\"w-4 h-4 text-green-600\" />\n                          ) : (\n                            <Copy className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deletePaymentCodeMutation.mutate(code.id)}\n                          disabled={deletePaymentCodeMutation.isPending}\n                          className=\"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\n                          title=\"Delete payment code\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <CreditCard className=\"w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-3\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">No payment codes added yet</p>\n                  <p className=\"text-sm text-gray-400 dark:text-gray-500\">Click \"Add Code\" to get started</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18212},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus, Printer, Edit2, Trash2, Search, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport ClientModal from \"@/components/client-modal\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type ClientWithCodes } from \"@shared/schema\";\nimport { printThermalReceipt } from \"@/components/thermal-print\";\n\nexport default function Clients() {\n  const { toast } = useToast();\n  const [showClientModal, setShowClientModal] = useState(false);\n  const [editingClient, setEditingClient] = useState<ClientWithCodes | undefined>();\n  const [searchResults, setSearchResults] = useState<ClientWithCodes[]>([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n\n  const { data: clients, isLoading } = useQuery<ClientWithCodes[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const deleteClientMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/clients?id=${clientId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ title: \"Client deleted successfully\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Error deleting client\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSearchResults = (results: ClientWithCodes[]) => {\n    setSearchResults(results);\n    setShowSearchResults(true);\n  };\n\n  const handleClearSearch = () => {\n    setSearchResults([]);\n    setShowSearchResults(false);\n  };\n\n  const handleEditClient = (client: ClientWithCodes) => {\n    setEditingClient(client);\n    setShowClientModal(true);\n  };\n\n  const handleDeleteClient = (client: ClientWithCodes) => {\n    if (confirm(`Are you sure you want to delete ${client.name}? This action cannot be undone.`)) {\n      deleteClientMutation.mutate(client.id);\n    }\n  };\n\n  const handlePrintClient = async (client: ClientWithCodes) => {\n    try {\n      // Get settings for print header\n      const settingsResponse = await fetch('/api/settings');\n      const settings = settingsResponse.ok ? await settingsResponse.json() : {};\n      \n      printThermalReceipt(client, {\n        companyName: settings.companyName || 'INEX CASH',\n        companyAddress: settings.companyAddress || '',\n        companyPhone: settings.companyPhone || ''\n      });\n      \n      toast({ title: \"Thermal receipt opened for printing\" });\n    } catch (error) {\n      console.error('Print error:', error);\n      toast({ \n        title: \"Print error\", \n        description: \"Could not open print dialog\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const displayClients = showSearchResults ? searchResults : clients || [];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-900 min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <SearchBar onResults={handleSearchResults} onClear={handleClearSearch} />\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button onClick={() => setShowClientModal(true)} className=\"dark:bg-blue-600 dark:hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client\n            </Button>\n          </div>\n        </div>\n        \n        {/* Search Results */}\n        {showSearchResults && searchResults.length > 0 && (\n          <div className=\"px-6 pb-4\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <p className=\"text-sm text-blue-800\">\n                Showing {searchResults.length} search results\n              </p>\n            </div>\n          </div>\n        )}\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Clients</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage your clients and their payment codes</p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                  <div className=\"flex space-x-2 mb-4\">\n                    <div className=\"w-6 h-6 bg-gray-200 rounded\"></div>\n                    <div className=\"w-6 h-6 bg-gray-200 rounded\"></div>\n                    <div className=\"w-6 h-6 bg-gray-200 rounded\"></div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : displayClients.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {displayClients.map((client) => (\n              <Link key={client.id} href={`/clients/${client.id}`}>\n                <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n                          <span className=\"font-medium text-gray-700\">\n                            {client.name.split(' ').map(n => n[0]).join('')}\n                          </span>\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">{client.name}</h3>\n                          <p className=\"text-sm text-gray-600\">{client.phone}</p>\n                        </div>\n                      </div>\n                    </div>\n                  \n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      {(client.paymentCodes || []).slice(0, 4).map((code) => (\n                        <div\n                          key={code.id}\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: code.service?.color || '#gray' }}\n                          title={code.service?.name || 'Unknown Service'}\n                        />\n                      ))}\n                      {(client.paymentCodes || []).length > 4 && (\n                        <span className=\"text-xs text-gray-500\">+{(client.paymentCodes || []).length - 4}</span>\n                      )}\n                      {(client.paymentCodes || []).length === 0 && (\n                        <span className=\"text-sm text-gray-400\">No payment codes</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          handlePrintClient(client);\n                        }}\n                        title=\"Print\"\n                      >\n                        <Printer className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          handleEditClient(client);\n                        }}\n                        title=\"Edit\"\n                      >\n                        <Edit2 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          handleDeleteClient(client);\n                        }}\n                        title=\"Delete\"\n                        disabled={deleteClientMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Search className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {showSearchResults ? \"No search results\" : \"No clients yet\"}\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                {showSearchResults \n                  ? \"Try adjusting your search query to find what you're looking for.\"\n                  : \"Get started by adding your first client with their payment codes.\"\n                }\n              </p>\n              {!showSearchResults && (\n                <Button onClick={() => setShowClientModal(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Client\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <ClientModal \n        isOpen={showClientModal} \n        onClose={() => {\n          setShowClientModal(false);\n          setEditingClient(undefined);\n        }}\n        client={editingClient}\n      />\n    </div>\n  );\n}\n","size_bytes":10430},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus, Users, CreditCard, Activity, Search, Printer, Edit2, UserPlus, Upload, Download, FileText, Eye } from \"lucide-react\";\nimport { printThermalReceipt } from \"@/components/thermal-print\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport SearchBar from \"@/components/search-bar\";\nimport ClientModal from \"@/components/client-modal\";\nimport ExportModal from \"@/components/export-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type ClientWithCodes, type DashboardStats, type Service } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [showClientModal, setShowClientModal] = useState(false);\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [searchResults, setSearchResults] = useState<ClientWithCodes[]>([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentClients } = useQuery<ClientWithCodes[]>({\n    queryKey: [\"/api/clients\"],\n    select: (data) => data.slice(0, 5), // Get first 5 clients\n  });\n\n  const { data: services } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const handleSearchResults = (results: ClientWithCodes[]) => {\n    setSearchResults(results);\n    setShowSearchResults(true);\n  };\n\n  const handleClearSearch = () => {\n    setSearchResults([]);\n    setShowSearchResults(false);\n  };\n\n  const handlePrintClient = async (client: ClientWithCodes) => {\n    try {\n      // Get settings for print header\n      const settingsResponse = await fetch('/api/settings');\n      const settings = settingsResponse.ok ? await settingsResponse.json() : {};\n      \n      printThermalReceipt(client, {\n        companyName: settings.companyName || 'INEX CASH',\n        companyAddress: settings.companyAddress || '',\n        companyPhone: settings.companyPhone || ''\n      });\n      \n      toast({ title: \"Thermal receipt opened for printing\" });\n    } catch (error) {\n      console.error('Print error:', error);\n      toast({ \n        title: \"Print error\", \n        description: \"Could not open print dialog\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <SearchBar onResults={handleSearchResults} onClear={handleClearSearch} />\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button onClick={() => setShowClientModal(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client\n            </Button>\n          </div>\n        </div>\n        \n        {/* Search Results */}\n        {showSearchResults && searchResults.length > 0 && (\n          <div className=\"px-6 pb-4\">\n            <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg max-h-64 overflow-y-auto\">\n              {searchResults.map((client) => (\n                <div key={client.id} className=\"p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{client.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{client.phone}</p>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      {client.paymentCodes.slice(0, 3).map((code) => (\n                        <span\n                          key={code.id}\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: code.service.color }}\n                          title={code.service.name}\n                        />\n                      ))}\n                      {client.paymentCodes.length > 3 && (\n                        <span className=\"text-xs text-gray-500\">+{client.paymentCodes.length - 3}</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </header>\n\n      {/* Main Content */}\n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-primary bg-opacity-10 rounded-lg\">\n                  <Users className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Clients</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.totalClients || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-lg\">\n                  <CreditCard className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Payment Codes</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.totalCodes || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-lg\">\n                  <Activity className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Services</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.activeServices || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-purple-100 rounded-lg\">\n                  <Search className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Daily Searches</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.dailySearches || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity & Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          {/* Recent Clients */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold text-gray-900\">Recent Clients</h2>\n                  <Button variant=\"ghost\">View All</Button>\n                </div>\n              </div>\n              \n              <CardContent className=\"p-6\">\n                {recentClients && recentClients.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentClients.map((client) => (\n                      <Link key={client.id} href={`/clients/${client.id}`}>\n                        <div className=\"flex items-center justify-between p-4 border border-gray-100 rounded-lg hover:shadow-md transition-shadow cursor-pointer\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                              <span className=\"font-medium text-gray-700\">\n                                {client.name.split(' ').map(n => n[0]).join('')}\n                              </span>\n                            </div>\n                            <div className=\"ml-3\">\n                              <h3 className=\"font-medium text-gray-900\">{client.name}</h3>\n                              <p className=\"text-sm text-gray-600\">{client.phone}</p>\n                            </div>\n                          </div>\n                        \n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex space-x-1\">\n                              {client.paymentCodes.slice(0, 4).map((code) => (\n                                <span\n                                  key={code.id}\n                                  className=\"w-3 h-3 rounded-full\"\n                                  style={{ backgroundColor: code.service.color }}\n                                  title={code.service.name}\n                                />\n                              ))}\n                            </div>\n                            {client.paymentCodes.length > 4 && (\n                              <span className=\"text-xs text-gray-500\">+{client.paymentCodes.length - 4}</span>\n                            )}\n                          </div>\n                        \n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                handlePrintClient(client);\n                              }}\n                              title=\"Print\"\n                            >\n                              <Printer className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              title=\"View Details\"\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </Link>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No clients yet. Add your first client to get started.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Quick Actions */}\n          <Card>\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Quick Actions</h2>\n            </div>\n            \n            <CardContent className=\"p-6 space-y-4\">\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start\"\n                onClick={() => setShowClientModal(true)}\n              >\n                <UserPlus className=\"w-5 h-5 text-primary mr-3\" />\n                Add New Client\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start\"\n                onClick={() => toast({ title: \"Bulk import feature coming soon\" })}\n              >\n                <Upload className=\"w-5 h-5 text-green-600 mr-3\" />\n                Import Clients\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start\"\n                onClick={() => setShowExportModal(true)}\n              >\n                <Download className=\"w-5 h-5 text-blue-600 mr-3\" />\n                Export to CSV\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start\"\n                onClick={() => toast({ title: \"Report generation feature coming soon\" })}\n              >\n                <FileText className=\"w-5 h-5 text-purple-600 mr-3\" />\n                Generate Report\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Services Overview */}\n        <Card>\n          <div className=\"p-6 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Services Overview</h2>\n          </div>\n          \n          <CardContent className=\"p-6\">\n            {services && services.length > 0 ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n                {services.map((service) => (\n                  <div key={service.id} className=\"text-center\">\n                    <div \n                      className=\"w-16 h-16 mx-auto mb-3 rounded-full flex items-center justify-center hover:scale-105 transition-transform cursor-pointer\"\n                      style={{ backgroundColor: service.color }}\n                    >\n                      <span className=\"text-white font-bold text-lg\">\n                        {service.name.charAt(0)}\n                      </span>\n                    </div>\n                    <h3 className=\"font-medium text-gray-900 text-sm\">{service.name}</h3>\n                    <p className=\"text-xs text-gray-600\">\n                      {recentClients?.filter(client => \n                        client.paymentCodes.some(code => code.serviceId === service.id)\n                      ).length || 0} clients\n                    </p>\n                  </div>\n                ))}\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 mx-auto mb-3 bg-gray-200 border-2 border-dashed border-gray-400 rounded-full flex items-center justify-center cursor-pointer hover:bg-gray-300 transition-colors\">\n                    <Plus className=\"w-8 h-8 text-gray-600\" />\n                  </div>\n                  <h3 className=\"font-medium text-gray-600 text-sm\">Add Service</h3>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Activity className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No services configured yet.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <ClientModal \n        isOpen={showClientModal} \n        onClose={() => setShowClientModal(false)} \n      />\n      \n      <ExportModal \n        isOpen={showExportModal} \n        onClose={() => setShowExportModal(false)} \n      />\n    </>\n  );\n}\n","size_bytes":14954},"client/src/pages/export.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Download, FileText, Calendar, Users, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ClientWithCodes, Service } from \"@shared/schema\";\n\nexport default function Export() {\n  const [exportFormat, setExportFormat] = useState<\"csv\" | \"pdf\">(\"csv\");\n  const [dateRange, setDateRange] = useState({ from: \"\", to: \"\" });\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [includePaymentCodes, setIncludePaymentCodes] = useState(true);\n  const { toast } = useToast();\n\n  const { data: clients = [] } = useQuery<ClientWithCodes[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const handleServiceToggle = (serviceId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedServices([...selectedServices, serviceId]);\n    } else {\n      setSelectedServices(selectedServices.filter(id => id !== serviceId));\n    }\n  };\n\n  const getFilteredClients = () => {\n    let filtered = [...clients];\n\n    // Filter by selected services\n    if (selectedServices.length > 0) {\n      filtered = filtered.filter((client) =>\n        client.paymentCodes?.some(code => selectedServices.includes(code.serviceId))\n      );\n    }\n\n    return filtered;\n  };\n\n  const exportToCSV = () => {\n    const filteredClients = getFilteredClients();\n    \n    if (filteredClients.length === 0) {\n      toast({\n        title: \"No data to export\",\n        description: \"Please adjust your filters or add some clients first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const headers = [\"Name\", \"Phone\"];\n    if (includePaymentCodes) {\n      headers.push(\"Service\", \"Payment Code\");\n    }\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...filteredClients.flatMap((client) => {\n        if (includePaymentCodes && client.paymentCodes?.length) {\n          return client.paymentCodes.map(code => {\n            const service = services.find((s) => s.id === code.serviceId);\n            return [\n              `\"${client.name}\"`,\n              `\"${client.phone}\"`,\n              `\"${service?.name || 'Unknown'}\"`,\n              `\"${code.code}\"`\n            ].join(\",\");\n          });\n        } else {\n          const row = [`\"${client.name}\"`, `\"${client.phone}\"`];\n          if (includePaymentCodes) {\n            row.push('\"\"', '\"\"');\n          }\n          return [row.join(\",\")];\n        }\n      })\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `clients_export_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Export successful\",\n      description: `${filteredClients.length} clients exported to CSV`,\n    });\n  };\n\n  const exportToPDF = () => {\n    toast({\n      title: \"Feature coming soon\",\n      description: \"PDF export will be available in the next update\",\n    });\n  };\n\n  const handleExport = () => {\n    if (exportFormat === \"csv\") {\n      exportToCSV();\n    } else {\n      exportToPDF();\n    }\n  };\n\n  const filteredClients = getFilteredClients();\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Export Data</h1>\n        <p className=\"text-gray-600\">Export client data and payment codes</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"w-5 h-5\" />\n                Export Settings\n              </CardTitle>\n              <CardDescription>\n                Configure your export preferences and filters\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"format\">Export Format</Label>\n                  <Select value={exportFormat} onValueChange={(value: \"csv\" | \"pdf\") => setExportFormat(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"csv\">CSV File</SelectItem>\n                      <SelectItem value=\"pdf\">PDF Document (Coming Soon)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center space-x-2 pt-6\">\n                  <Checkbox\n                    id=\"include-codes\"\n                    checked={includePaymentCodes}\n                    onCheckedChange={(checked) => setIncludePaymentCodes(Boolean(checked))}\n                  />\n                  <Label htmlFor=\"include-codes\">Include payment codes</Label>\n                </div>\n              </div>\n\n              <div>\n                <Label>Date Range (Optional)</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  <Input\n                    type=\"date\"\n                    placeholder=\"From date\"\n                    value={dateRange.from}\n                    onChange={(e) => setDateRange({ ...dateRange, from: e.target.value })}\n                  />\n                  <Input\n                    type=\"date\"\n                    placeholder=\"To date\"\n                    value={dateRange.to}\n                    onChange={(e) => setDateRange({ ...dateRange, to: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Filter by Services</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {services.map((service) => (\n                    <div key={service.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`service-${service.id}`}\n                        checked={selectedServices.includes(service.id)}\n                        onCheckedChange={(checked) => handleServiceToggle(service.id, Boolean(checked))}\n                      />\n                      <Label htmlFor={`service-${service.id}`} className=\"text-sm\">\n                        {service.name}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                {services.length === 0 && (\n                  <p className=\"text-sm text-gray-500 mt-2\">No services available</p>\n                )}\n              </div>\n\n              <Button \n                onClick={handleExport} \n                className=\"w-full flex items-center gap-2\"\n                disabled={filteredClients.length === 0}\n              >\n                <Download className=\"w-4 h-4\" />\n                Export {filteredClients.length} Clients\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Export Preview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Users className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"text-sm font-medium\">Total Clients</span>\n                  </div>\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {filteredClients.length}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <FileText className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"text-sm font-medium\">Format</span>\n                  </div>\n                  <div className=\"text-lg font-semibold\">\n                    {exportFormat.toUpperCase()}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Calendar className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"text-sm font-medium\">Export Date</span>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {new Date().toLocaleDateString()}\n                  </div>\n                </div>\n\n                {selectedServices.length > 0 && (\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <div className=\"text-sm font-medium mb-2\">Filtered Services</div>\n                    <div className=\"space-y-1\">\n                      {selectedServices.map(serviceId => {\n                        const service = services.find((s) => s.id === serviceId);\n                        return (\n                          <div key={serviceId} className=\"text-xs text-gray-600\">\n                            • {service?.name}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10194},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, Save, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Service, InsertService } from \"@shared/schema\";\n\nexport default function Services() {\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState({ name: \"\", color: \"\" });\n  const [newService, setNewService] = useState({ name: \"\", color: \"#3b82f6\" });\n  const [showAddForm, setShowAddForm] = useState(false);\n  const { toast } = useToast();\n\n  const { data: services = [], isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertService) => {\n      const response = await apiRequest(\"POST\", \"/api/services\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setNewService({ name: \"\", color: \"#3b82f6\" });\n      setShowAddForm(false);\n      toast({\n        title: \"Success\",\n        description: \"Service created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Service> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/services/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setEditingId(null);\n      toast({\n        title: \"Success\",\n        description: \"Service updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/services/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (service: Service) => {\n    setEditingId(service.id);\n    setEditForm({ name: service.name, color: service.color });\n  };\n\n  const handleSave = () => {\n    if (editingId) {\n      updateMutation.mutate({ id: editingId, data: editForm });\n    }\n  };\n\n  const handleCancel = () => {\n    setEditingId(null);\n    setEditForm({ name: \"\", color: \"\" });\n  };\n\n  const handleCreate = () => {\n    if (newService.name.trim()) {\n      createMutation.mutate({\n        name: newService.name,\n        color: newService.color,\n        icon: \"circle\" // Default icon\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Services</h1>\n          <p className=\"text-gray-600\">Manage available services for payment codes</p>\n        </div>\n        <Button \n          onClick={() => setShowAddForm(true)}\n          className=\"flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Service\n        </Button>\n      </div>\n\n      {showAddForm && (\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Add New Service</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4 items-end\">\n              <div className=\"flex-1\">\n                <label className=\"block text-sm font-medium mb-2\">Service Name</label>\n                <Input\n                  value={newService.name}\n                  onChange={(e) => setNewService({ ...newService, name: e.target.value })}\n                  placeholder=\"e.g., Orange, Inwi, Maroc Telecom\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Color</label>\n                <input\n                  type=\"color\"\n                  value={newService.color}\n                  onChange={(e) => setNewService({ ...newService, color: e.target.value })}\n                  className=\"w-16 h-10 border border-gray-300 rounded cursor-pointer\"\n                />\n              </div>\n              <Button \n                onClick={handleCreate} \n                disabled={createMutation.isPending}\n                className=\"flex items-center gap-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Save\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAddForm(false)}\n                className=\"flex items-center gap-2\"\n              >\n                <X className=\"w-4 h-4\" />\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {services.map((service) => (\n          <Card key={service.id} className=\"relative\">\n            <CardHeader>\n              {editingId === service.id ? (\n                <div className=\"space-y-3\">\n                  <Input\n                    value={editForm.name}\n                    onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}\n                    placeholder=\"Service name\"\n                  />\n                  <input\n                    type=\"color\"\n                    value={editForm.color}\n                    onChange={(e) => setEditForm({ ...editForm, color: e.target.value })}\n                    className=\"w-16 h-8 border border-gray-300 rounded cursor-pointer\"\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      onClick={handleSave}\n                      disabled={updateMutation.isPending}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Save className=\"w-3 h-3\" />\n                      Save\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      onClick={handleCancel}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{service.name}</CardTitle>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleEdit(service)}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => deleteMutation.mutate(service.id)}\n                        disabled={deleteMutation.isPending}\n                        className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <CardDescription>\n                    <Badge \n                      style={{ backgroundColor: service.color, color: '#fff' }}\n                      className=\"text-xs\"\n                    >\n                      {service.name}\n                    </Badge>\n                  </CardDescription>\n                </>\n              )}\n            </CardHeader>\n          </Card>\n        ))}\n      </div>\n\n      {services.length === 0 && !showAddForm && (\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No services yet</h3>\n          <p className=\"text-gray-600 mb-4\">Get started by adding your first service</p>\n          <Button onClick={() => setShowAddForm(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Service\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9452},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Save, Database, Bell, Shield, Palette, Globe, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Settings() {\n  const [settings, setSettings] = useState({\n    // General Settings\n    companyName: \"Customer Manager\",\n    companyPhone: \"\",\n    companyAddress: \"\",\n    \n    // Firebase Configuration\n    firebaseApiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"\",\n    firebaseProjectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"\",\n    firebaseAppId: import.meta.env.VITE_FIREBASE_APP_ID || \"\",\n    \n    // Notification Settings\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    \n    // UI Settings\n    theme: \"light\",\n    language: \"en\",\n    dateFormat: \"dd/mm/yyyy\",\n    currency: \"MAD\",\n    \n    // Security Settings\n    autoLogout: true,\n    sessionTimeout: 60,\n    twoFactorAuth: false,\n    \n    // Backup Settings\n    autoBackup: true,\n    backupFrequency: \"daily\",\n    retentionDays: 30,\n  });\n\n  const [connectionStatus, setConnectionStatus] = useState<\"idle\" | \"testing\" | \"success\" | \"error\">(\"idle\");\n  const [connectionMessage, setConnectionMessage] = useState(\"\");\n\n  const { toast } = useToast();\n  const { theme, setTheme } = useTheme();\n  const queryClient = useQueryClient();\n\n  // Load settings from Firebase\n  const { data: savedSettings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Save settings mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: (data: any) => \n      fetch(\"/api/settings\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Settings saved\",\n        description: \"Your preferences have been updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test Firebase connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: () => \n      fetch(\"/api/settings/test-connection\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      }).then(res => res.json()),\n    onSuccess: (data: any) => {\n      setConnectionStatus(data.success ? \"success\" : \"error\");\n      setConnectionMessage(data.message);\n    },\n    onError: () => {\n      setConnectionStatus(\"error\");\n      setConnectionMessage(\"Connection test failed\");\n    },\n  });\n\n  // Load saved settings when data is available\n  useEffect(() => {\n    if (savedSettings) {\n      setSettings(prev => ({ ...prev, ...savedSettings }));\n    }\n  }, [savedSettings]);\n\n  const handleSave = () => {\n    saveSettingsMutation.mutate(settings);\n  };\n\n  const handleTestConnection = () => {\n    setConnectionStatus(\"testing\");\n    setConnectionMessage(\"\");\n    testConnectionMutation.mutate();\n  };\n\n  const handleReset = () => {\n    // Reset to defaults and clear from database\n    const defaultSettings = {\n      companyName: \"Customer Manager\",\n      companyPhone: \"\",\n      companyAddress: \"\",\n      emailNotifications: true,\n      smsNotifications: false,\n      pushNotifications: true,\n      theme: \"light\",\n      language: \"en\",\n      dateFormat: \"dd/mm/yyyy\",\n      currency: \"MAD\",\n      autoLogout: true,\n      sessionTimeout: 60,\n      twoFactorAuth: false,\n      autoBackup: true,\n      backupFrequency: \"daily\",\n      retentionDays: 30,\n    };\n    setSettings(prev => ({ ...prev, ...defaultSettings }));\n    saveSettingsMutation.mutate(defaultSettings);\n  };\n\n  const updateSetting = (key: string, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const getConnectionStatusIcon = () => {\n    switch (connectionStatus) {\n      case \"testing\":\n        return <Loader2 className=\"h-4 w-4 animate-spin text-blue-600\" />;\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"error\":\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Database className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getConnectionStatusBadge = () => {\n    switch (connectionStatus) {\n      case \"testing\":\n        return <Badge variant=\"secondary\">Testing...</Badge>;\n      case \"success\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-700\">Connected</Badge>;\n      case \"error\":\n        return <Badge variant=\"destructive\">Connection Failed</Badge>;\n      default:\n        return <Badge variant=\"outline\">Not Tested</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"p-6 bg-white dark:bg-gray-900 min-h-screen\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Settings</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">Configure your application preferences</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        \n        {/* General Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"w-5 h-5\" />\n              General Settings\n            </CardTitle>\n            <CardDescription>\n              Basic company and application information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"company-name\">Company Name</Label>\n              <Input\n                id=\"company-name\"\n                value={settings.companyName}\n                onChange={(e) => updateSetting(\"companyName\", e.target.value)}\n                placeholder=\"Your company name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company-phone\">Company Phone</Label>\n              <Input\n                id=\"company-phone\"\n                value={settings.companyPhone}\n                onChange={(e) => updateSetting(\"companyPhone\", e.target.value)}\n                placeholder=\"Company phone number\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company-address\">Company Address</Label>\n              <Input\n                id=\"company-address\"\n                value={settings.companyAddress}\n                onChange={(e) => updateSetting(\"companyAddress\", e.target.value)}\n                placeholder=\"Company address\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"language\">Language</Label>\n                <Select value={settings.language} onValueChange={(value) => updateSetting(\"language\", value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"fr\">Français</SelectItem>\n                    <SelectItem value=\"ar\">العربية</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select value={settings.currency} onValueChange={(value) => updateSetting(\"currency\", value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"MAD\">MAD (Dirham)</SelectItem>\n                    <SelectItem value=\"EUR\">EUR (Euro)</SelectItem>\n                    <SelectItem value=\"USD\">USD (Dollar)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Firebase Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Firebase Database\n            </CardTitle>\n            <CardDescription>\n              Firebase project configuration and connection status\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                {getConnectionStatusIcon()}\n                <span className=\"text-sm font-medium\">Connection Status</span>\n              </div>\n              {getConnectionStatusBadge()}\n            </div>\n            \n            {connectionMessage && (\n              <div className={`p-3 rounded-lg text-sm ${\n                connectionStatus === \"success\" \n                  ? \"bg-green-50 text-green-700 border border-green-200\" \n                  : connectionStatus === \"error\"\n                  ? \"bg-red-50 text-red-700 border border-red-200\"\n                  : \"bg-blue-50 text-blue-700 border border-blue-200\"\n              }`}>\n                {connectionMessage}\n              </div>\n            )}\n\n            <div>\n              <Label htmlFor=\"firebase-api-key\">API Key</Label>\n              <Input\n                id=\"firebase-api-key\"\n                type=\"password\"\n                value={settings.firebaseApiKey}\n                onChange={(e) => updateSetting(\"firebaseApiKey\", e.target.value)}\n                placeholder=\"Firebase API Key\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Environment: {import.meta.env.VITE_FIREBASE_API_KEY ? \"Configured\" : \"Not Set\"}\n              </p>\n            </div>\n            <div>\n              <Label htmlFor=\"firebase-project-id\">Project ID</Label>\n              <Input\n                id=\"firebase-project-id\"\n                value={settings.firebaseProjectId}\n                onChange={(e) => updateSetting(\"firebaseProjectId\", e.target.value)}\n                placeholder=\"Firebase Project ID\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Environment: {import.meta.env.VITE_FIREBASE_PROJECT_ID ? \"Configured\" : \"Not Set\"}\n              </p>\n            </div>\n            <div>\n              <Label htmlFor=\"firebase-app-id\">App ID</Label>\n              <Input\n                id=\"firebase-app-id\"\n                value={settings.firebaseAppId}\n                onChange={(e) => updateSetting(\"firebaseAppId\", e.target.value)}\n                placeholder=\"Firebase App ID\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Environment: {import.meta.env.VITE_FIREBASE_APP_ID ? \"Configured\" : \"Not Set\"}\n              </p>\n            </div>\n            \n            <Button \n              onClick={handleTestConnection}\n              disabled={testConnectionMutation.isPending || connectionStatus === \"testing\"}\n              className=\"w-full\"\n              variant=\"outline\"\n            >\n              {testConnectionMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Testing Connection...\n                </>\n              ) : (\n                <>\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Test Firebase Connection\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* UI & Display Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Palette className=\"w-5 h-5\" />\n              UI & Display\n            </CardTitle>\n            <CardDescription>\n              Customize the appearance and behavior\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"theme\">Theme</Label>\n                <Select value={theme} onValueChange={(value) => setTheme(value as \"light\" | \"dark\" | \"system\")}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"light\">Light</SelectItem>\n                    <SelectItem value=\"dark\">Dark</SelectItem>\n                    <SelectItem value=\"system\">System</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date-format\">Date Format</Label>\n                <Select value={settings.dateFormat} onValueChange={(value) => updateSetting(\"dateFormat\", value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"dd/mm/yyyy\">DD/MM/YYYY</SelectItem>\n                    <SelectItem value=\"mm/dd/yyyy\">MM/DD/YYYY</SelectItem>\n                    <SelectItem value=\"yyyy-mm-dd\">YYYY-MM-DD</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              Notifications\n            </CardTitle>\n            <CardDescription>\n              Configure notification preferences\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Email Notifications</Label>\n                <p className=\"text-sm text-gray-500\">Receive updates via email</p>\n              </div>\n              <Switch\n                checked={settings.emailNotifications}\n                onCheckedChange={(checked) => updateSetting(\"emailNotifications\", checked)}\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>SMS Notifications</Label>\n                <p className=\"text-sm text-gray-500\">Receive SMS alerts</p>\n              </div>\n              <Switch\n                checked={settings.smsNotifications}\n                onCheckedChange={(checked) => updateSetting(\"smsNotifications\", checked)}\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Push Notifications</Label>\n                <p className=\"text-sm text-gray-500\">Browser push notifications</p>\n              </div>\n              <Switch\n                checked={settings.pushNotifications}\n                onCheckedChange={(checked) => updateSetting(\"pushNotifications\", checked)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Security\n            </CardTitle>\n            <CardDescription>\n              Security and privacy settings\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Auto Logout</Label>\n                <p className=\"text-sm text-gray-500\">Automatically log out after inactivity</p>\n              </div>\n              <Switch\n                checked={settings.autoLogout}\n                onCheckedChange={(checked) => updateSetting(\"autoLogout\", checked)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n              <Input\n                id=\"session-timeout\"\n                type=\"number\"\n                value={settings.sessionTimeout}\n                onChange={(e) => updateSetting(\"sessionTimeout\", parseInt(e.target.value))}\n                min=\"15\"\n                max=\"480\"\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Two-Factor Authentication</Label>\n                <p className=\"text-sm text-gray-500\">Add extra security to your account</p>\n              </div>\n              <Switch\n                checked={settings.twoFactorAuth}\n                onCheckedChange={(checked) => updateSetting(\"twoFactorAuth\", checked)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Backup Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Backup & Recovery\n            </CardTitle>\n            <CardDescription>\n              Data backup and recovery options\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Auto Backup</Label>\n                <p className=\"text-sm text-gray-500\">Automatically backup your data</p>\n              </div>\n              <Switch\n                checked={settings.autoBackup}\n                onCheckedChange={(checked) => updateSetting(\"autoBackup\", checked)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"backup-frequency\">Backup Frequency</Label>\n              <Select value={settings.backupFrequency} onValueChange={(value) => updateSetting(\"backupFrequency\", value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"hourly\">Hourly</SelectItem>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"retention-days\">Retention Days</Label>\n              <Input\n                id=\"retention-days\"\n                type=\"number\"\n                value={settings.retentionDays}\n                onChange={(e) => updateSetting(\"retentionDays\", parseInt(e.target.value))}\n                min=\"7\"\n                max=\"365\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between items-center mt-8 pt-6 border-t\">\n        <Button variant=\"outline\" onClick={handleReset}>\n          Reset to Defaults\n        </Button>\n        <Button onClick={handleSave} className=\"flex items-center gap-2\">\n          <Save className=\"w-4 h-4\" />\n          Save Settings\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":19993},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }","size_bytes":1055},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }","size_bytes":1476},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }","size_bytes":260},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}